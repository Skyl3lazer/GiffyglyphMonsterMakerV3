@inherits LayoutComponentBase
@using GiffyglyphMonsterMakerV3.Data;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity
@inject MonsterService _MonsterService;
@inject FolderService _FolderService;
@inject UserManager<ApplicationUser> _UserManager
@using Blazored.Toast.Configuration

<PageTitle>GiffyglyphMonsterMakerV3</PageTitle>

<div class="page">
    <div class="sidebar d-print-none">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth d-print-none border-bottom border-2 border-light bg-opacity-100 bg-light">
            <LoginDisplay />
        </div>
        <CascadingValue Value="@Monsters">
            <CascadingValue Value="@Folders">
                <article class="content px-4">
                    @Body
                </article>
            </CascadingValue>
        </CascadingValue>
    </main>
</div>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="4"
                IconType="IconType.FontAwesome"
                InfoClass="bg-info"
                InfoIcon="fas fa-lightbulb"
                SuccessClass="bg-success"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug"
                ErrorClass="bg-danger"
                WarningClass="bg-warning"
                WarningIcon="fas fa-circle-exclamation"
                ShowProgressBar="true"
                RemoveToastsOnNavigation="true" />

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<Monster> Monsters { get; set; }
    private List<Folder> Folders { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        Monsters = await Task.Run(() => _MonsterService.GetAllMonstersAsync());
        var fol = await Task.Run(() => _FolderService.GetAllFoldersAsync());
        if(fol.Count == 0 && userId != null)
        {
            var newFolder = new Folder("/", userId);
            await _FolderService.InsertFolderAsync(newFolder);
            fol.Add(newFolder);
        }
        Folders = fol;
    }
}
