@using GiffyglyphMonsterMakerV3.Data
@using GiffyglyphMonsterMakerV3.Utility
@using Microsoft.EntityFrameworkCore.Diagnostics
@using Action = GiffyglyphMonsterMakerV3.Data.Action
@using System.Security.Claims;
@inject FeatureService _fs;
@inject IToastService _ts;

<div class="modal fade" id="featureModal" tabindex="-1" aria-labelledby="featureModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="featureModalLabel">@(SpecificFeature != null ? "Editing " + SpecificFeature.Type + ": " + SpecificFeature.Name : "Feature Editor")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    @*CONTENT*@
                    @if (FeatureTemplates == null)
                    {
                        <div>Loading Templates...</div>
                    }
                    else if (FeatureTemplates != null && SpecificFeature == null)
                    {
                        <div class="fst-italic align-text-top" style="font-size: 0.6rem">(* indicates the premade template is related to the monster's type or other attributes)</div>
                        <div class="mb-2">
                            <span class="fw-bold">Template Abilities: </span>
                            <InputSelect Value="@SelectedFeatureType" TValue="FeatureType" ValueExpression="() => SelectedFeatureType" ValueChanged="(FeatureType t) => SelectedFeatureChanged(t)">
                                @foreach (var item in Enum.GetValues(typeof(FeatureType)))
                                {
                                    <option value="@item">@item</option>
                                }
                            </InputSelect>
                            <InputSelect @bind-Value="@SelectedFeatureTemplateId" TValue="Guid?">
                                @foreach (var item in 
                                    FeatureTemplates.Where(feature => feature.Type == SelectedFeatureType)
                                        .OrderBy(feature => (
                                            feature.Type != FeatureType.Trait
                                                ? feature.Name
                                                : (((Trait)feature).AssociatedCreatureType == ActiveMonster.Type ? "*" : "") + feature.Name)))
                                {
                                    <option value="@item.Id">@((item.Type != FeatureType.Trait
                                                                 ? item.Name
                                                                 : (((Trait)item).AssociatedCreatureType == ActiveMonster.Type ? "*" : "") + item.Name))
                                    </option>
                                }
                            </InputSelect>
                            <span @onclick="() => AddSelectedTemplateToActive()">
                                <span class="fas fa-plus mx-1"/>
                                <span>Add to Active</span>
                            </span>

                            @if (SelectedFeatureTemplate != null && SelectedFeatureTemplate.CreateUserId == CurrentUserId)
                            {
                                <button class="btn btn-outline-danger float-end hoverDeleteButton" style="margin-top: -6px;" type="button" @onclick="() => DeleteTemplate(SelectedFeatureTemplate)"><span><span class="me-1 fas fa-trash"/>Delete Template</span></button>
                            }

                        </div>
                        if (SelectedFeatureTemplate != null)
                        {
                            <div>
                                <span class="fw-bold">Preview: </span>
                                <span class="">@((MarkupString)SelectedFeatureTemplate.MarkupDescription(ActiveMonster))</span>
                            </div>
                        }
                        <hr />
                        <div class="h4 mb-1"> <span class="fw-bold">Create New Feature</span></div>
                        <div class="row">
                            <div class="col-4 rounded-pill border border-2 border-black">
                                <div class="align-content-center text-center" @onclick="() => NewFeature(FeatureType.Trait)"><span class="fas fa-image-portrait fw-bold me-1" /> Add new Trait</div>
                            </div>
                            <div class="col-4 rounded-pill border border-2 border-black">
                                <div class="align-content-center text-center" @onclick="() => NewFeature(FeatureType.Free)">
                                    <span class="fas fa-bolt fw-bold me-1" />Add new Free Action
                                </div>
                            </div>
                            <div class="col-4 rounded-pill border border-2 border-black">
                                <div class="align-content-center text-center" @onclick="() => NewFeature(FeatureType.Action)">
                                    <span class="fas fa-swords fw-bold me-1" />Add new Action
                                </div>
                            </div>
                            <div class="col-4 rounded-pill border border-2 border-black">
                                <div class="align-content-center text-center" @onclick="() => NewFeature(FeatureType.Bonus)">
                                    <span class="fas fa-circle-plus fw-bold me-1" />Add new Bonus Action
                                </div>
                            </div>
                            <div class="col-4 rounded-pill border border-2 border-black">
                                <div class="align-content-center text-center" @onclick="() => NewFeature(FeatureType.Reaction)">
                                    <span class="fas fa-circle-exclamation fw-bold me-1" />Add new Reaction
                                </div>
                            </div>
                            <div class="col-4 rounded-pill border border-2 border-black">
                                <div class="align-content-center text-center" @onclick="() => NewFeature(FeatureType.Countermeasure)">
                                    <span class="fas fa-skull fw-bold me-1" />Add new Countermeasure
                                </div>
                            </div>
                        </div>

                    }
                    else
                    {
                        if (SelectedFeatureTemplate != null)
                        {
                            <div>
                                <span class="fw-bold">From Template: </span><span class="fw-bold">@SelectedFeatureTemplate.Name</span>
                                <button type="button" class="btn btn-outline-warning" @onclick="() => ResetFeatureToTemplate(SpecificFeature)"><span class="me-1 fas fa-arrow-rotate-right" />Reset to Template</button>
                                <button class="btn btn-outline-danger" type="button" @onclick="() => DisconnectFeatureFromTemplate(SpecificFeature)"><span class="me-1 fas fa-plug-circle-xmark" />Disconnect from Template</button>
                            </div>
                            <div>
                                <span class=""><span class="fst-italic">Template Preview:</span> @((MarkupString)SelectedFeatureTemplate.MarkupDescription(ActiveMonster))</span>
                            </div>
                            <hr />
                        }
                        <div>
                            <span class="fst-italic">Preview: </span>
                            <span class="">@((MarkupString)SpecificFeature.MarkupDescription(ActiveMonster))</span>
                            @*Default feature stuff*@
                            <div class="row">
                                <div class="col-6">
                                    <div class="row fw-bold">General Properties</div>
                                    <div class="row">
                                        <div class="col-4">Name:</div>
                                        <div class="col-6">
                                            <input class="w-100" @bind="SpecificFeature.Name" @bind:event="oninput" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-4">Rarity:</div>
                                        <div class="col-6">
                                            <InputSelect class="w-100" @bind-Value="SpecificFeature.Rarity" TValue="RarityType">
                                                @foreach (var item in Enum.GetValues(typeof(RarityType)))
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-4">Associated Attribute:</div>
                                        <div class="col-6">
                                            <InputSelect class="w-100" @bind-Value="SpecificFeature.RelevantAttribute" TValue="AttributeType">
                                                @foreach (var item in Enum.GetValues(typeof(AttributeType)))
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-4">Has a Save? </div>
                                        <div class="col-2">
                                            <InputCheckbox class="h-100 w-100" @bind-Value="SpecificFeature.HasSave" />
                                        </div>
                                    </div>
                                    @if (SpecificFeature.HasSave)
                                    {
                                        <div class="row">
                                            <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Save Vs?</div>
                                            <div class="col-6">
                                                <input @bind="SpecificFeature.SaveVs" @bind:event="oninput" style="width: 65px;" />
                                            </div>
                                        </div>
                                    }
                                    <div class="row">
                                        <div class="col-4">Frequency:</div>
                                        <div class="col-6">
                                            <InputSelect class="w-100" @bind-Value="SpecificFeature.Frequency.Type" TValue="FrequencyType">
                                                @foreach (var item in Enum.GetValues(typeof(FrequencyType)))
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    @if (SpecificFeature.Frequency.Type != FrequencyType.passive)
                                    {
                                        <div class="row">
                                            <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Frequency Value:</div>
                                            <div class="col-6">
                                                <input class="w-100" @bind="SpecificFeature.Frequency.Value" @bind:event="oninput" style="width: 50px;" />
                                            </div>
                                        </div>
                                    }
                                    <div class="row">
                                        <div class="col-4">Delay:</div>
                                        <div class="col-6">
                                            <InputSelect class="w-100" @bind-Value="SpecificFeature.Frequency.Delay" TValue="DelayType">
                                                @foreach (var item in Enum.GetValues(typeof(DelayType)))
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    @if (SpecificFeature.Frequency.Delay != DelayType.none)
                                    {
                                        <div class="row">
                                            <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Delay Value:</div>
                                            <div class="col-6">
                                                <input @bind="SpecificFeature.Frequency.DelayValue" @bind:event="oninput" style="width: 50px;" />
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="col-6 border-left border-light">
                                    <span class="row fw-bold">@SpecificFeature.Type Specific</span>
                                    @switch (SpecificFeature.Type)
                                    {
                                        case FeatureType.Trait:
                                            var trait = SpecificFeature as Trait;
                                            <div class="row">
                                                <div>Trait Description:</div>
                                            </div>
                                            <div class="row">
                                                <textarea @bind="trait.TraitDescription" maxlength="5000" @bind:event="oninput"></textarea>
                                            </div>
                                            break;
                                        case FeatureType.Free:
                                        case FeatureType.Bonus:
                                        case FeatureType.Reaction:
                                        case FeatureType.Action:
                                            var action = SpecificFeature as Action;
                                            <div class="row">
                                                <div class="col-4">Distance:</div>
                                                <div class="col-6">
                                                    <InputSelect class="w-100" @bind-Value="action.Distance" TValue="RangeType">
                                                        @foreach (var item in Enum.GetValues(typeof(RangeType)))
                                                        {
                                                            <option value="@item">@item</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-4">Range/Reach:</div>
                                                <div class="col-6">
                                                    <InputNumber class="w-100" @bind-Value="@action.Range" min="0" TValue="int" />
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-4">Spell?</div>
                                                <div class="col-2">
                                                    <InputCheckbox class="h-100 w-100" @bind-Value="action.IsSpell" />
                                                </div>
                                            </div>
                                            <div class="row">
                                                @if (action.IsSpell)
                                                {
                                                    <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Description:</div>
                                                    <div class="col-6">
                                                        <input class="w-100" @bind="action.SpellDesc" @bind:event="oninput" />
                                                    </div>
                                                }
                                            </div>
                                            <div class="row">
                                                <div class="col-4">Deals Damage?</div>
                                                <div class="col-2">
                                                    <InputCheckbox class="h-100 w-100" @bind-Value="action.DealsDamage" />
                                                </div>
                                            </div>
                                            @if (action.DealsDamage)
                                            {
                                                <div class="row">
                                                    <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Damage Type:</div>
                                                    <div class="col-6">
                                                        <InputSelect class="w-100" @bind-Value="action.ActionDamageType" TValue="DamageType">
                                                            @foreach (var item in Enum.GetValues(typeof(DamageType)))
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Multiplier:</div>
                                                    <div class="col-6">
                                                        <InputNumber class="w-100" @bind-Value="@action.DamageMultiplier" min="0" TValue="double" />
                                                    </div>
                                                </div>
                                            }
                                            <div class="row">
                                                <div class="col-4">Multiattack?</div>
                                                <div class="col-2">
                                                    <InputCheckbox class="h-100 w-100" @bind-Value="action.IsMultiAttack" />
                                                </div>
                                            </div>
                                            @if (action.IsMultiAttack)
                                            {
                                                <div class="row">
                                                    <div class="col-4"><span class="fa-regular fa-caret-right me-1" />How Many?</div>
                                                    <div class="col-6">
                                                        <InputNumber class="w-100" @bind-Value="@action.MultiAttack" min="0" TValue="int" />
                                                    </div>
                                                </div>
                                            }
                                            <div class="row">
                                                <div class="col-4">Other Effect:</div>
                                                <div class="col-6">
                                                    <input class="w-100" @bind="action.OtherEffect" @bind:event="oninput" />
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-4">Miss Effect:</div>
                                                <div class="col-6">
                                                    <input class="w-100" @bind="action.MissEffect" @bind:event="oninput" />
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-4">Effect Area:</div>
                                                <div class="col-6">
                                                    <InputSelect class="w-100" @bind-Value="action.Shape" TValue="TargetShape">
                                                        @foreach (var item in Enum.GetValues(typeof(TargetShape)))
                                                        {
                                                            <option value="@item">@item</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            <div class="row">
                                                @if (action.Shape == TargetShape.target)
                                                {
                                                    <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Number of Targets:</div>
                                                    <div class="col-6">
                                                        <InputNumber class="w-100" @bind-Value="@action.Targets" min="0" TValue="int" />
                                                    </div>
                                                }
                                                else if (action.Shape != TargetShape.self)
                                                {
                                                    <div class="col-4"><span class="fa-regular fa-caret-right me-1" />Radius</div>
                                                    <div class="col-6">
                                                        <InputNumber class="w-100" @bind-Value="@action.Radius" min="0" TValue="int" />
                                                    </div>
                                                }
                                            </div>

                                            break;
                                        case FeatureType.Countermeasure:
                                            var countermeasure = SpecificFeature as Countermeasure;
                                            <div class="row">
                                                <div class="col">Trait Description:</div>
                                            </div>

                                            <div class="row">
                                                <textarea @bind="countermeasure.CountermeasureDescription" maxlength="5000" @bind:event="oninput"></textarea>
                                            </div>
                                            break;
                                    }
                                </div>
                            </div>
                            <hr />
                            <div>
                                <span class="fw-bold card-header collapsed" data-bs-toggle="collapse" data-bs-target="#overrideProperties" aria-expanded="false" aria-controls="overrideProperties">
                                    Override Properties<span class="fas fa-chevrons-down mx-1" /><span class="fas fa-chevrons-up mx-1" />
                                </span>
                                <div class="collapse" id="overrideProperties">
                                    <div class="">
                                        <span class="">Custom Icon (See FontAwesome): </span>
                                        <input @bind="SpecificFeature.CustomIcon" @bind:event="oninput" />
                                    </div>
                                    <div>Custom Markup:</div>
                                    <div>
                                        <textarea @bind="SpecificFeature.OverrideMarkup" class="w-100" maxlength="5000" @bind:event="oninput"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <span>
                    @if (SpecificFeature != null)
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => SaveFeature()"><span class="fas fa-floppy-disk" />Save</button>
                        if (SelectedFeatureTemplate == null || SelectedFeatureTemplate.CreateUserId == CurrentUserId)
                        {
                            <button type="button" class="btn btn-primary ms-1" @onclick="() => SaveAndUpdateTemplate()"><span class="fak fa-solid-floppy-disk-circle-plus" />Save and @(SpecificFeature?.TemplateId == null ? "Add" : "Update") Template</button>
                        }
                        else if (SelectedFeatureTemplate != null && SelectedFeatureTemplate.CreateUserId != CurrentUserId)
                        {
                            <button type="button" class="btn btn-secondary disabled ms-1"><span class="fas fa-floppy-disk-circle-xmark" />Generic Template</button>
                        }
                    }
                    <button type="button" class="btn btn-secondary ms-1" data-bs-dismiss="modal"><span class="fas fa-x" />Close</button>
                </span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Monster ActiveMonster { get; set; }
    [Parameter]
    public Feature? SpecificFeature { get; set; }
    [Parameter]
    public EventCallback FeatureChangedCallback { get; set; }
    [Parameter]
    public EventCallback SelectedFeatureCallback { get; set; }
    [Parameter]
    public EventCallback SaveMonster { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? CurrentUserId = null;

    private List<Feature>? FeatureTemplates { get; set; }
    private Feature? SelectedFeatureTemplate { get; set; }
    private Guid? _selectedFeatureTemplateId;
    private Guid? SelectedFeatureTemplateId
    {
        get => _selectedFeatureTemplateId;
        set
        {
            if (_selectedFeatureTemplateId != value)
                _selectedFeatureTemplateId = value;

            if (_selectedFeatureTemplateId != null)
            {
                SelectedFeatureTemplate = FeatureTemplates?.First(a => a.Id == value);
            }
            else
            {
                SelectedFeatureTemplate = null;
            }
        }
    }
    private FeatureType SelectedFeatureType { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        SelectedFeatureTemplateId = null;
        var authState = await authenticationStateTask;
        var User = authState.User;
        CurrentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);

        if (SpecificFeature != null && ActiveMonster?.Id != SpecificFeature?.ParentId)
            SpecificFeature = null;

        FeatureTemplates = await _fs.GetAllFeatureTemplatesAsync();
        if (SpecificFeature != null && SpecificFeature.TemplateId != null)
        {
            SelectedFeatureTemplate = FeatureTemplates.First(a => a.Id == SpecificFeature.TemplateId);
        }
        if (SpecificFeature == null && SelectedFeatureTemplate == null && FeatureTemplates.Count > 0)
        {
            SelectedFeatureTemplateId = FeatureTemplates.First().Id;
            SelectedFeatureType = SelectedFeatureTemplate.Type;
        }
        StateHasChanged();
    }


    private async Task DeleteTemplate(Feature f)
    {
        FeatureTemplates.Remove(f);
        if (FeatureTemplates.Count > 0)
        {
            SelectedFeatureTemplateId = FeatureTemplates.First().Id;
            SelectedFeatureType = SelectedFeatureTemplate.Type;
        }
        else
        {
            SelectedFeatureTemplateId = null;
        }
        var result = await _fs.DeleteFeatureAsync(f, true);
        if (result)
        {
            _ts.ShowWarning(f.Name, "Removed Template");
        }
        else
        {
            _ts.ShowError("Could not remove template!");
        }
    }

    private async Task DisconnectFeatureFromTemplate(Feature f)
    {
        SpecificFeature.TemplateId = null;
        SelectedFeatureTemplate = null;
        await _fs.UpdateFeatureAsync(SpecificFeature);
        StateHasChanged();
    }
    private async Task ResetFeatureToTemplate(Feature f)
    {
        switch (f.Type)
        {
            case FeatureType.Trait:
                var trait = f as Trait;
                var templateTrait = SelectedFeatureTemplate as Trait;
                trait.UpdateThisToMatch(templateTrait);
                await _fs.UpdateFeatureAsync(trait);
                break;
            case FeatureType.Free:
                var free = f as FreeAction;
                var templateFree = SelectedFeatureTemplate as FreeAction;
                free.UpdateThisToMatch(templateFree);
                await _fs.UpdateFeatureAsync(free);
                break;
            case FeatureType.Action:
                var act = f as Action;
                var templateAct = SelectedFeatureTemplate as Action;
                act.UpdateThisToMatch(templateAct);
                await _fs.UpdateFeatureAsync(act);
                break;
            case FeatureType.Bonus:
                var bonus = f as BonusAction;
                var templateBonus = SelectedFeatureTemplate as BonusAction;
                bonus.UpdateThisToMatch(templateBonus);
                await _fs.UpdateFeatureAsync(bonus);
                break;
            case FeatureType.Reaction:
                var reaction = f as Reaction;
                var templateReaction = SelectedFeatureTemplate as Reaction;
                reaction.UpdateThisToMatch(templateReaction);
                await _fs.UpdateFeatureAsync(reaction);
                break;
            case FeatureType.Countermeasure:
                var cm = f as Countermeasure;
                var templateCm = SelectedFeatureTemplate as Countermeasure;
                cm.UpdateThisToMatch(templateCm);
                await _fs.UpdateFeatureAsync(cm);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        await _fs.UpdateFeatureAsync(SpecificFeature);
        StateHasChanged();
    }

    private Task SelectedFeatureChanged(FeatureType type)
    {
        SelectedFeatureType = type;
        SelectedFeatureTemplateId = FeatureTemplates.Where(feature => feature.Type == SelectedFeatureType).Count() != 0 ? FeatureTemplates.Where(feature => feature.Type == SelectedFeatureType).First().Id : null;
        return Task.CompletedTask;
    }

    private async Task NewFeature(FeatureType type)
    {
        if (ActiveMonster.Features.Count > 50)
            return;

        SelectedFeatureTemplate = null;
        switch (type)
        {
            case FeatureType.Trait:
                var trait = new Trait(CurrentUserId);
                trait.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(trait);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await SelectedFeatureCallback.InvokeAsync(trait);
                break;
            case FeatureType.Free:
                var free = new FreeAction(CurrentUserId);
                free.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(free);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await SelectedFeatureCallback.InvokeAsync(free);
                break;
            case FeatureType.Action:
                var action = new Action(CurrentUserId);
                action.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(action);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await SelectedFeatureCallback.InvokeAsync(action);
                break;
            case FeatureType.Bonus:
                var bonus = new BonusAction(CurrentUserId);
                bonus.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(bonus);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await SelectedFeatureCallback.InvokeAsync(bonus);
                break;
            case FeatureType.Reaction:
                var reaction = new Reaction(CurrentUserId);
                reaction.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(reaction);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await SelectedFeatureCallback.InvokeAsync(reaction);
                break;
            case FeatureType.Countermeasure:
                var countermeasure = new Countermeasure(CurrentUserId);
                countermeasure.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(countermeasure);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await SelectedFeatureCallback.InvokeAsync(countermeasure);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(type), type, null);
        }
        StateHasChanged();
    }

    private async Task AddSelectedTemplateToActive()
    {
        if (SelectedFeatureTemplate == null)
        {
            return;
        }
        switch (SelectedFeatureTemplate.Type)
        {
            case FeatureType.Trait:
                var newTrait = (SelectedFeatureTemplate as Trait).Clone();
                newTrait.TemplateId = SelectedFeatureTemplate.Id;
                newTrait.Id = Guid.NewGuid();
                newTrait.Frequency.Id = Guid.NewGuid();
                newTrait.CreateUserId = CurrentUserId;
                newTrait.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(newTrait);
                await SelectedFeatureCallback.InvokeAsync(newTrait);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await _fs.InsertFeatureAsync(newTrait);
                break;
            case FeatureType.Free:
                var newFree = (SelectedFeatureTemplate as FreeAction).Clone();
                newFree.TemplateId = SelectedFeatureTemplate.Id;
                newFree.Id = Guid.NewGuid();
                newFree.Frequency.Id = Guid.NewGuid();
                newFree.CreateUserId = CurrentUserId;
                newFree.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(newFree);
                await SelectedFeatureCallback.InvokeAsync(newFree);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await _fs.InsertFeatureAsync(newFree);
                break;
            case FeatureType.Action:
                var newAction = (SelectedFeatureTemplate as Action).Clone();
                newAction.TemplateId = SelectedFeatureTemplate.Id;
                newAction.Id = Guid.NewGuid();
                newAction.Frequency.Id = Guid.NewGuid();
                newAction.CreateUserId = CurrentUserId;
                newAction.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(newAction);
                await SelectedFeatureCallback.InvokeAsync(newAction);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await _fs.InsertFeatureAsync(newAction);
                break;
            case FeatureType.Bonus:
                var newBonus = (SelectedFeatureTemplate as BonusAction).Clone();
                newBonus.TemplateId = SelectedFeatureTemplate.Id;
                newBonus.Id = Guid.NewGuid();
                newBonus.Frequency.Id = Guid.NewGuid();
                newBonus.CreateUserId = CurrentUserId;
                newBonus.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(newBonus);
                await SelectedFeatureCallback.InvokeAsync(newBonus);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await _fs.InsertFeatureAsync(newBonus);
                break;
            case FeatureType.Reaction:
                var newReaction = (SelectedFeatureTemplate as Reaction).Clone();
                newReaction.TemplateId = SelectedFeatureTemplate.Id;
                newReaction.Id = Guid.NewGuid();
                newReaction.Frequency.Id = Guid.NewGuid();
                newReaction.CreateUserId = CurrentUserId;
                newReaction.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(newReaction);
                await SelectedFeatureCallback.InvokeAsync(newReaction);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await _fs.InsertFeatureAsync(newReaction);
                break;
            case FeatureType.Countermeasure:
                var newCm = (SelectedFeatureTemplate as Countermeasure).Clone();
                newCm.TemplateId = SelectedFeatureTemplate.Id;
                newCm.Id = Guid.NewGuid();
                newCm.Frequency.Id = Guid.NewGuid();
                newCm.CreateUserId = CurrentUserId;
                newCm.ParentId = ActiveMonster.Id;
                ActiveMonster.Features.Add(newCm);
                await SelectedFeatureCallback.InvokeAsync(newCm);
                await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
                await _fs.InsertFeatureAsync(newCm);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        StateHasChanged();
    }

    private async Task SaveAndUpdateTemplate()
    {
        bool result1;
        bool result2;
        if (SpecificFeature?.TemplateId != null)
        {
            switch (SpecificFeature.Type)
            {
                case FeatureType.Trait:
                    var templateTrait = (await _fs.GetFeatureByIdAsync(SpecificFeature.TemplateId.Value) as Trait);
                    templateTrait.UpdateThisToMatch(SpecificFeature as Trait);
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature as Trait);
                    result2 = await _fs.UpdateFeatureAsync(templateTrait);
                    break;
                case FeatureType.Free:
                    var templateFree = (await _fs.GetFeatureByIdAsync(SpecificFeature.TemplateId.Value) as FreeAction);
                    templateFree.UpdateThisToMatch(SpecificFeature as FreeAction);
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature as FreeAction);
                    result2 = await _fs.UpdateFeatureAsync(templateFree);
                    break;
                case FeatureType.Action:
                    var templateAction = (await _fs.GetFeatureByIdAsync(SpecificFeature.TemplateId.Value) as Action);
                    templateAction.UpdateThisToMatch(SpecificFeature as Action);
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature as Action);
                    result2 = await _fs.UpdateFeatureAsync(templateAction);
                    break;
                case FeatureType.Bonus:
                    var templateBonus = (await _fs.GetFeatureByIdAsync(SpecificFeature.TemplateId.Value) as BonusAction);
                    templateBonus.UpdateThisToMatch(SpecificFeature as BonusAction);
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature as BonusAction);
                    result2 = await _fs.UpdateFeatureAsync(templateBonus);
                    break;
                case FeatureType.Reaction:
                    var templateReaction = (await _fs.GetFeatureByIdAsync(SpecificFeature.TemplateId.Value) as Reaction);
                    templateReaction.UpdateThisToMatch(SpecificFeature as Reaction);
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature as Reaction);
                    result2 = await _fs.UpdateFeatureAsync(templateReaction);
                    break;
                case FeatureType.Countermeasure:
                    var templateCm = (await _fs.GetFeatureByIdAsync(SpecificFeature.TemplateId.Value) as Countermeasure);
                    templateCm.UpdateThisToMatch(SpecificFeature as Countermeasure);
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature as Countermeasure);
                    result2 = await _fs.UpdateFeatureAsync(templateCm);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        else
        {
            switch (SpecificFeature.Type)
            {
                case FeatureType.Trait:
                    var newTemplateTrait = (SpecificFeature as Trait).Clone();
                    newTemplateTrait.Id = Guid.NewGuid();
                    newTemplateTrait.Frequency.Id = Guid.NewGuid();
                    newTemplateTrait.CreateUserId = CurrentUserId;
                    SpecificFeature.TemplateId = newTemplateTrait.Id;
                    newTemplateTrait.ParentId = null;
                    SelectedFeatureTemplate = newTemplateTrait;
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature);
                    result2 = await _fs.InsertFeatureAsync(newTemplateTrait);
                    break;
                case FeatureType.Free:
                    var newTemplateFree = (SpecificFeature as FreeAction).Clone();
                    newTemplateFree.Id = Guid.NewGuid();
                    newTemplateFree.Frequency.Id = Guid.NewGuid();
                    newTemplateFree.CreateUserId = CurrentUserId;
                    SpecificFeature.TemplateId = newTemplateFree.Id;
                    newTemplateFree.ParentId = null;
                    SelectedFeatureTemplate = newTemplateFree;
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature);
                    result2 = await _fs.InsertFeatureAsync(newTemplateFree);
                    break;
                case FeatureType.Action:
                    var newTemplateAction = (SpecificFeature as Action).Clone();
                    newTemplateAction.Id = Guid.NewGuid();
                    newTemplateAction.Frequency.Id = Guid.NewGuid();
                    newTemplateAction.CreateUserId = CurrentUserId;
                    SpecificFeature.TemplateId = newTemplateAction.Id;
                    newTemplateAction.ParentId = null;
                    SelectedFeatureTemplate = newTemplateAction;
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature);
                    result2 = await _fs.InsertFeatureAsync(newTemplateAction);
                    break;
                case FeatureType.Bonus:
                    var newTemplateBonus = (SpecificFeature as BonusAction).Clone();
                    newTemplateBonus.Id = Guid.NewGuid();
                    newTemplateBonus.Frequency.Id = Guid.NewGuid();
                    newTemplateBonus.CreateUserId = CurrentUserId;
                    SpecificFeature.TemplateId = newTemplateBonus.Id;
                    newTemplateBonus.ParentId = null;
                    SelectedFeatureTemplate = newTemplateBonus;
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature);
                    result2 = await _fs.InsertFeatureAsync(newTemplateBonus);
                    break;
                case FeatureType.Reaction:
                    var newTemplateReaction = (SpecificFeature as Reaction).Clone();
                    newTemplateReaction.Id = Guid.NewGuid();
                    newTemplateReaction.Frequency.Id = Guid.NewGuid();
                    newTemplateReaction.CreateUserId = CurrentUserId;
                    SpecificFeature.TemplateId = newTemplateReaction.Id;
                    newTemplateReaction.ParentId = null;
                    SelectedFeatureTemplate = newTemplateReaction;
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature);
                    result2 = await _fs.InsertFeatureAsync(newTemplateReaction);
                    break;
                case FeatureType.Countermeasure:
                    var newTemplateCounter = (SpecificFeature as Countermeasure).Clone();
                    newTemplateCounter.Id = Guid.NewGuid();
                    newTemplateCounter.Frequency.Id = Guid.NewGuid();
                    newTemplateCounter.CreateUserId = CurrentUserId;
                    SpecificFeature.TemplateId = newTemplateCounter.Id;
                    newTemplateCounter.ParentId = null;
                    SelectedFeatureTemplate = newTemplateCounter;
                    result1 = await _fs.UpdateFeatureAsync(SpecificFeature);
                    result2 = await _fs.InsertFeatureAsync(newTemplateCounter);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

        }
        await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
        await SaveMonster.InvokeAsync();
        if (result1 && result2)
        {
            _ts.ShowSuccess(SpecificFeature.Name + " and template", "Saved");
        }
        else
        {
            _ts.ShowError("Could not save feature and template!");
        }
        StateHasChanged();
    }

    private async Task SaveFeature()
    {
        var result = await _fs.UpdateFeatureAsync(SpecificFeature);
        await FeatureChangedCallback.InvokeAsync(ActiveMonster.Features);
        await SaveMonster.InvokeAsync();
        StateHasChanged();
        if (result)
        {
            _ts.ShowSuccess(SpecificFeature.Name, "Saved");
        }
        else
        {
            _ts.ShowError("Could not save feature.");
        }
    }
}
