@using GiffyglyphMonsterMakerV3.Data
@using System.Diagnostics
@using GiffyglyphMonsterMakerV3.Utility

<div class="@(Hidden ? "d-none " : "")border-black border border-2 p-1 px-2 bg-light text-dark row" id="monster-@(model.Id)">
    <div class="col-6">
        <div class="monsterPrimary px-2">
            <div class="name text-white fw-bold fs-2">@model.Name</div>
            <div class="text-white fst-italic">@model.Size @model.Type @(String.IsNullOrWhiteSpace(model.TypeDetail) ? "" : "(" + model.TypeDetail + ")")</div>
        </div>
        <div class="monsterAccent px-2">
            <span class="fa-solid fa-crown text-white" />
            <span class="text-white fw-bold">Level @model.CombatLevel @model.MonsterRank@(model.MonsterRank == Rank.Paragon ? " T" + model.ParagonThreat : ""), @model.MonsterRole @(string.IsNullOrWhiteSpace(model.MonsterRoleDetail) ? "" : "(" + model.MonsterRoleDetail + ")")</span>
        </div>
        <div class="p-1">
            <div class="row monsterAccent text-white">
                <div class="col col-2 fs-6 border border-1 border-opacity-50 border-white text-center fw-bold">STR</div>
                <div class="col col-2 fs-6 border border-1 border-opacity-50 border-white text-center fw-bold">DEX</div>
                <div class="col col-2 fs-6 border border-1 border-opacity-50 border-white text-center fw-bold">CON</div>
                <div class="col col-2 fs-6 border border-1 border-opacity-50 border-white text-center fw-bold">INT</div>
                <div class="col col-2 fs-6 border border-1 border-opacity-50 border-white text-center fw-bold">WIS</div>
                <div class="col col-2 fs-6 border border-1 border-opacity-50 border-white text-center fw-bold">CHA</div>
            </div>
            <div class="row monsterPrimary text-white">
                <div class="col fs-4 border border-opacity-50 border-white text-center fw-bold">@(model.Attributes.Strength + model.Attributes.AttributeMod)</div>
                <div class="col fs-4 border border-opacity-50 border-white text-center fw-bold">@(model.Attributes.Dexterity + model.Attributes.AttributeMod)</div>
                <div class="col fs-4 border border-opacity-50 border-white text-center fw-bold">@(model.Attributes.Constitution + model.Attributes.AttributeMod)</div>
                <div class="col fs-4 border border-opacity-50 border-white text-center fw-bold">@(model.Attributes.Intelligence + model.Attributes.AttributeMod)</div>
                <div class="col fs-4 border border-opacity-50 border-white text-center fw-bold">@(model.Attributes.Wisdom + model.Attributes.AttributeMod)</div>
                <div class="col fs-4 border border-opacity-50 border-white text-center fw-bold">@(model.Attributes.Charisma + model.Attributes.AttributeMod)</div>
            </div>
        </div>
        <div>
            <div class="row">
                <div class="col-auto pe-0"><span class="fa-solid fa-shield-halved line-icon" /></div>
                <div class="col ps-0">
                    <span class="monsterPrimaryText fw-bold">AC </span><span>@(model.Defenses.ArmorClass).</span>
                    <span class="monsterPrimaryText fw-bold">Saving Throws</span>
                    @if (model.Defenses.ProficientSavingThrows.Strength)
                    {
                        <span> Str +@(model.Attributes.Strength + model.Defenses.SaveBonus + model.Attributes.AttributeMod)</span>
                    }
                    @if (model.Defenses.ProficientSavingThrows.Dexterity)
                    {
                        <span> Dex +@(model.Attributes.Dexterity + model.Defenses.SaveBonus + model.Attributes.AttributeMod)</span>
                    }
                    @if (model.Defenses.ProficientSavingThrows.Constitution)
                    {
                        <span> Con +@(model.Attributes.Constitution + model.Defenses.SaveBonus + model.Attributes.AttributeMod)</span>
                    }
                    @if (model.Defenses.ProficientSavingThrows.Intelligence)
                    {
                        <span> Int +@(model.Attributes.Intelligence + model.Defenses.SaveBonus + model.Attributes.AttributeMod)</span>
                    }
                    @if (model.Defenses.ProficientSavingThrows.Wisdom)
                    {
                        <span> Wis +@(model.Attributes.Wisdom + model.Defenses.SaveBonus + model.Attributes.AttributeMod)</span>
                    }
                    @if (model.Defenses.ProficientSavingThrows.Charisma)
                    {
                        <span> Cha +@(model.Attributes.Charisma + model.Defenses.SaveBonus + model.Attributes.AttributeMod)</span>
                    }
                    <span>.</span>
                </div>
            </div>
            <div class="row">
                <div class="col-auto pe-0"><span class="fa-solid fa-heart line-icon" /></div>
                <div class="col ps-0">
                    <span class="monsterPrimaryText fw-bold">HP </span><span>@(model.Defenses.HitPoints).</span>
                    @if (model.Defenses.Resistances.Count > 0)
                    {
                        <span class="monsterPrimaryText fw-bold"> Resistant </span>
                        <span>to </span>
                        <span>@(string.Join(", ", model.Defenses.Resistances)).</span>
                    }
                    @if (model.Defenses.Immunities.Count > 0)
                    {
                        <span class="monsterPrimaryText fw-bold"> Immune </span>
                        <span>to </span>
                        <span>@(string.Join(", ", model.Defenses.Immunities)).</span>
                    }
                    @if (model.Defenses.Vulnerabilities.Count > 0)
                    {
                        <span class="monsterPrimaryText fw-bold"> Vulnerable </span>
                        <span>to </span>
                        <span>@(string.Join(", ", model.Defenses.Vulnerabilities)).</span>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-auto pe-0"><span class="fa-solid fa-swords line-icon" /></div>
                <div class="col ps-0">
                    <span class="monsterPrimaryText fw-bold">ATK </span><span>+@(model.Offense.Attack).</span>
                    <span class="monsterPrimaryText fw-bold">DC </span><span>+@(model.Offense.DifficultyCheck).</span>
                    <span class="monsterPrimaryText fw-bold">DMG </span>
                    <span>
                        @(model.Offense.Damage)
                        @if (model.Offense.RandomizeDamage)
                        {
                            <span> (@(DiceTools.ConvertToDiceString(model.Offense.RandomDamageRange, model.Offense.Damage)))</span>
                        }
                        <span>.</span>
                    </span>
                    <span class="monsterPrimaryText fw-bold">Reach </span><span>@model.MaxReach ft.</span>
                    @if (model.MaxRange > 0)
                    {
                        <span class="monsterPrimaryText fw-bold"> Range </span>

                        <span>@model.MaxRange ft.</span>
                    }
                </div>
            </div>
            <hr class="monsterAccent my-1 border border-2 border-opacity-100" />
            <div>
                <div class="row">
                    <div class="col-auto pe-0"><span class="fa-solid fa-bolt line-icon" /></div>
                    <div class="col ps-0">
                        <span class="monsterPrimaryText fw-bold">Speed </span><span>@(model.WalkSpeed + model.SpeedMod) ft.</span>
                        @foreach (var item in model.OtherSpeeds)
                        {
                            <span>, @item.Key @(item.Value + model.SpeedMod) ft.</span>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-auto pe-0"><span class="fa-solid fa-eye line-icon" /></div>
                    <div class="col ps-0">
                        <span class="monsterPrimaryText fw-bold">Senses </span>
                        @foreach (var item in model.Senses)
                        {
                            <span>@item.Key @item.Value ft. </span>
                        }
                        <span class="">passive Perception </span><span>@(10 + model.Attributes.Wisdom).</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-auto pe-0"><span class="fa-solid fa-comment line-icon" /></div>
                    <div class="col ps-0">
                        <span class="monsterPrimaryText fw-bold">Languages </span>
                        @if (model.Languages.Count() > 0)
                        {
                            <span>@(string.Join(", ", model.Languages)).</span>
                        }
                        else
                        {
                            <span>None.</span>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-auto pe-0"><span class="fa-solid fa-award line-icon" /></div>
                    <div class="col ps-0">
                        <span class="monsterPrimaryText fw-bold">Proficiency </span><span>+@model.Proficiency</span>
                        @*<span class="monsterPrimaryText fw-bold">CR </span>
                        <span class="monsterPrimaryText fw-bold">XP </span>*@
                    </div>
                </div>
                @if (model.Items.Count() > 0)
                {
                    <div class="row">
                        <div class="col-auto pe-0"><span class="fa-solid fa-sack line-icon" /></div>
                        <div class="col ps-0">
                            <span class="monsterPrimaryText fw-bold">Items </span>
                            <span>@(string.Join(", ", model.Items)).</span>
                        </div>
                    </div>
                }
                @if (model.Features.Any(f => f.Type == FeatureType.Trait))
                {
                    <div>
                        <div class="monsterTertiary" style="height: 24px"><span class="monsterPrimary text-white fw-bold h-100 d-inline-block ps-1 align-top" style="z-index: 10; position: relative">Traits</span><span class="slant-45 monsterPrimary d-inline-block h-100 align-top" style="width: 48px; margin-left: -30px; position: relative; z-index: 1;" /></div>
                        <div class="monsterPrimary d-block" style="height: 4px; margin-top: -1px;" />
                        @foreach (var feature in model.Features.Where(b => b.Type == FeatureType.Trait).OrderBy(d => d.Rarity).ThenByDescending(c => c.Name))
                        {
                            <div class="py-1">
                                <span>@((MarkupString)feature.MarkupDescription(model))</span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    @**@
    <div class="col-6">
        <div>
            @if (!model.Features.Any(f => f.Type == FeatureType.Free) && (model.ParagonDefenses > 0 || model.ParagonPowers > 0))
            {
                <div>
                    <div class="monsterTertiary" style="height: 24px">
                        <span class="monsterPrimary text-white fw-bold h-100 d-inline-block ps-1 align-top" style="z-index: 10; position: relative">Free</span>
                        <span class="slant-45 monsterPrimary d-inline-block h-100 align-top" style="width: 48px; margin-left: -30px; position: relative; z-index: 1;" />
                    </div>
                    <div class="monsterPrimary d-block" style="height: 4px; margin-top: -1px;" />
                    @if (model.ParagonPowers > 0)
                    {
                        <div class="py-1">
                            <span>@((MarkupString)ParagonPower.MarkupDescription(model))</span>
                        </div>
                    }
                    @if (model.ParagonDefenses > 0)
                    {
                        <div class="py-1">
                            <span>@((MarkupString)ParagonDefense.MarkupDescription(model))</span>
                        </div>
                    }
                </div>
            }
            @foreach (var fType in
            model.Features
            .Where(f => f.Type != FeatureType.Trait)
            .Select(a => a.Type)
            .Distinct()
            .OrderBy(b => (int)b)
            )
            {
                <div>
                    <div class="monsterTertiary" style="height: 24px"><span class="monsterPrimary text-white fw-bold h-100 d-inline-block ps-1 align-top" style="z-index: 10; position: relative">@fType@(fType.ToString().EndsWith("s") ? "" : "s")</span><span class="slant-45 monsterPrimary d-inline-block h-100 align-top" style="width: 48px; margin-left: -30px; position: relative; z-index: 1;" /></div>
                    <div class="monsterPrimary d-block" style="height: 4px; margin-top: -1px;" />
                    @foreach (var feature in model.Features.Where(b => b.Type == fType).OrderBy(d => d.Rarity).ThenByDescending(c => c.Name))
                    {
                        <div class="py-1">
                            <span>@((MarkupString)feature.MarkupDescription(model))</span>
                        </div>
                    }
                    @if (fType == FeatureType.Free && (model.ParagonDefenses > 0 || model.ParagonPowers > 0))
                    {
                        @if (model.ParagonPowers > 0)
                        {
                            <div class="py-1">
                                <span>@((MarkupString)ParagonPower.MarkupDescription(model))</span>
                            </div>
                        }
                        @if (model.ParagonDefenses > 0)
                        {
                            <div class="py-1">
                                <span>@((MarkupString)ParagonDefense.MarkupDescription(model))</span>
                            </div>
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Monster model { get; set; }
    [Parameter]
    public bool Hidden { get; set; }


    public FreeAction ParagonPower
    {
        get
        {
            return new FreeAction(null) { Name = "Paragon Power", Rarity = RarityType.Uncommon, Frequency = new FeatureFrequency() { Type = FrequencyType.round, Value = model.ParagonPowers }, CustomIcon = "fa-crown", OverrideMarkup = "At the end of another creature's turn, you may either a) take an action and regain your reaction or b) reroll a saving throw." };
        }
    }

    public FreeAction ParagonDefense
    {
        get
        {
            return new FreeAction(null) { Name = "Paragon Defense", Rarity = RarityType.Rare, Frequency = new FeatureFrequency() { Type = FrequencyType.longrest, Value = model.ParagonDefenses }, CustomIcon = "fa-crown", OverrideMarkup = "When you would fail a saving throw, you may spend " + (2 * model.CombatLevel) + " hit points to succeed." };

        }
    }


}
