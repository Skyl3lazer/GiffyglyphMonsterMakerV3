@page "/monstermaker"
@attribute [Authorize(Roles = "Administrator, AllowedUser")]
@using GiffyglyphMonsterMakerV3.Data
@using GiffyglyphMonsterMakerV3.Utility
@using Action = GiffyglyphMonsterMakerV3.Data.Action
@using System.Security.Claims;
@using ChromiumHTMLToPDF;
@inject MonsterService _ms;
@inject FeatureService _fs;
@inject IToastService _ts;
@inject IJSRuntime _javascript;


@if (active == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <_FeatureModal ActiveMonster="active" SpecificFeature="EditFeature" FeatureChangedCallback="(f) => FeaturesUpdated(f)" SelectedFeatureCallback="(f) => EditFeatureChanged(f)" SaveMonster="() => SaveActiveMonster(false)" />
    <_ConfirmDeleteFeatureModal TargetFeature="DeleteFeatureModalTarget" Result="(a) => ConfirmDeleteFeatureModalResult((Feature)a)" />

    <PageTitle>Monster Statblock Maker V3</PageTitle>
    <div class="container-xxl">
        <div class="row">
            <div class="col-3" id="monsterSettings">
                <div class="row">
                    <div><span class="fs-2 card-header" data-bs-toggle="collapse" data-bs-target="#monsterDetails" aria-expanded="true" aria-controls="monsterDetails">Monster Details<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterDetails" class="collapse show">
                        <div><span>Name: </span><input @bind="active.Name" @bind:event="oninput" /></div>
                        <div>
                            <span>Size: </span>
                            <InputSelect @bind-Value="active.Size">
                                @foreach (var item in Enum.GetValues(typeof(SizeType)))
                                {
                                    <option value="@item">@item</option>
                                }
                            </InputSelect>
                        </div>
                        <div>
                            <span>Creature Type: </span>
                            <InputSelect @bind-Value="active.Type">
                                @foreach (var item in Enum.GetValues(typeof(CreatureType)))
                                {
                                    <option value="@item">@item</option>
                                }
                            </InputSelect>
                        </div>
                        <div><span>Type Detail: </span><input @bind="active.TypeDetail" @bind:event="oninput" /></div>
                        <div><span>Combat Level: </span><InputNumber Value="@active.CombatLevel" min="0" ValueChanged="(int i) => LevelChanged(i)" ValueExpression="() => active.CombatLevel" TValue="int" /></div>
                        <div><span>Proficiency Bonus:</span> @active.Proficiency</div>
                        <div>
                            <span>Rank: </span>
                            <InputSelect Value="@active.MonsterRank" ValueChanged="(Rank i) => RankChanged(i)" ValueExpression="() => active.MonsterRank" TValue="Rank">
                                @foreach (var item in Enum.GetValues(typeof(Rank)))
                                {
                                    <option value="@item">@item</option>
                                }
                            </InputSelect>
                            @if (active.MonsterRank == Rank.Paragon)
                            {
                                <span> Threat: </span>
                                <InputNumber Value="active.ParagonThreat" min="1" ValueChanged="(int i) => ParagonChanged(i)" TValue="int" ValueExpression="() => active.ParagonThreat" />
                            }
                        </div>
                        <div>
                            <span>Role: </span>
                            <InputSelect Value="@active.MonsterRole" ValueChanged="(Role i) => RoleChanged(i)" ValueExpression="() => active.MonsterRole" TValue="Role">
                                @foreach (var item in Enum.GetValues(typeof(Role)))
                                {
                                    <option value="@item">@item</option>
                                }
                            </InputSelect>
                        </div>
                        <div><span>Role Special Type: </span><input @bind="active.MonsterRoleDetail" @bind:event="oninput" /></div>
                        <div class="fw-bold">Base Stats</div>
                        <div><span class="fst-italic">Recommended</span>: +@(HighStat), +@(HighStat), +@(MedStat), +@(MedStat), @(LowStat >= 0 ? "+" : "")@(LowStat), @(LowStat >= 0 ? "+" : "")@(LowStat)</div>

                        <div class="row">
                            <span class="col-2">STR: </span>
                            <InputSelect @bind-Value="active.Attributes.Strength" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">DEX: </span>
                            <InputSelect @bind-Value="active.Attributes.Dexterity" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">CON: </span>
                            <InputSelect @bind-Value="active.Attributes.Constitution" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="row">
                            <span class="col-2">INT: </span>
                            <InputSelect @bind-Value="active.Attributes.Intelligence" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">WIS: </span>
                            <InputSelect @bind-Value="active.Attributes.Wisdom" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">CHA: </span>
                            <InputSelect @bind-Value="active.Attributes.Charisma" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterOffense" aria-expanded="true" aria-controls="monsterOffense">Offense<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterOffense" class="collapse">
                        <div><span>Attack Bonus: </span><span><InputNumber @bind-Value="active.Offense.Attack" min="0" /></span></div>
                        <div><span>DC Mod: </span><InputNumber @bind-Value="active.Offense.DifficultyCheck" min="0" /></div>
                        <div>
                            <span>Damage Average: </span>
                            <span>
                                <InputNumber @bind-Value="active.Offense.Damage" min="0" /> Random: <InputCheckbox @bind-Value="active.Offense.RandomizeDamage" />
                            </span>
                        </div>
                        <div>
                            <span>
                                @if (active.Offense.RandomizeDamage)
                                {
                                    <InputSelect @bind-Value="@active.Offense.RandomDamageRange" TValue="DamageRange">
                                        @foreach (var item in Enum.GetValues(typeof(DamageRange)))
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                    <span>(@(DiceTools.ConvertToDiceString(active.Offense.RandomDamageRange, active.Offense.Damage)))</span>
                                }
                            </span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterDefense" aria-expanded="true" aria-controls="monsterDefense">Defense<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterDefense" class="collapse">
                        <div><span>Armor Class: </span><InputNumber @bind-Value="active.Defenses.ArmorClass" min="0" /></div>
                        <div><span>Hit Points: </span><InputNumber @bind-Value="active.Defenses.HitPoints" min="0" /></div>
                        <div><span>Save Bonus: </span><InputNumber @bind-Value="active.Defenses.SaveBonus" min="0" /></div>
                        <div><span>Proficient Saves</span></div>
                        <div>
                            <span>STR </span><InputCheckbox @bind-Value="active.Defenses.ProficientSavingThrows.Strength" />
                            <span>DEX </span><InputCheckbox @bind-Value="active.Defenses.ProficientSavingThrows.Dexterity" />
                            <span>CON </span><InputCheckbox @bind-Value="active.Defenses.ProficientSavingThrows.Constitution" />
                        </div>
                        <div>
                            <span>INT </span><InputCheckbox @bind-Value="active.Defenses.ProficientSavingThrows.Intelligence" />
                            <span>WIS </span><InputCheckbox @bind-Value="active.Defenses.ProficientSavingThrows.Wisdom" />
                            <span>CHA </span><InputCheckbox @bind-Value="active.Defenses.ProficientSavingThrows.Charisma" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterAbilities" aria-expanded="true" aria-controls="monsterAbilities">Abilities<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterAbilities" class="collapse">
                        <div>
                            <_EnumAdder Dict="@active.OtherSpeeds" Header="Other Speeds" ValueChangedEvent="(a) => SpeedsUpdated(a)"></_EnumAdder>
                        </div>
                        <div>
                            <_EnumAdder Dict="@active.Senses" Header="Senses" ValueChangedEvent="(a) => SenseUpdated(a)"></_EnumAdder>
                        </div>
                        <div>
                            <_stringAdder Header="Languages" ValueList="@active.Languages" ValueChangedEvent="(a) => LanguagesUpdated(a)" DefaultList="Enum.GetNames(typeof(DefaultLanguages)).ToList()"></_stringAdder>
                        </div>
                        <div>
                            <_stringAdder Header="Items" ValueList="@active.Items" ValueChangedEvent="(a) => ItemsUpdated(a)"></_stringAdder>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterFeatures" aria-expanded="true" aria-controls="monsterFeatures">Features<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterFeatures" class="collapse">
                        <span class="fst-italic">Recommended Features: </span>
                        <div>
                            <span class="fst-italic">
                                @switch (active.MonsterRank)
                                {
                                    case Rank.Minion:
                                        @("1-5 (1 Ancestral, 1 Role, 2 Misc)")
                                        break;
                                    case Rank.Grunt:
                                        @("3-8 (2 Ancestral, 2 Role, 3 Misc)")
                                        break;
                                    case Rank.Elite:
                                        @("5-11 (3 Ancestral, 2 Role, 4 Misc)")
                                        break;
                                    case Rank.Paragon:
                                        @("7-14 (3 Ancestral, 3 Role, 7 Misc)")
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }
                            </span>
                        </div>
                        <div class="fw-bold" data-bs-toggle="modal" data-bs-target="#featureModal" @onclick="() => EditFeature = null">Add Feature<span class="fas fa-plus ms-1"></span></div>
                        @foreach (var fType in
                       active.Features
                       .Select(a => a.Type)
                       .Distinct()
                       .OrderBy(b => (int)b)
                       )

                        {
                            <div>
                                <span class="fw-bold">@fType@(fType.ToString().EndsWith("s") ? "" : "s")</span>
                                @foreach (var feature in active.Features.Where(a => a.Type == fType).OrderBy(d => d.Rarity).ThenByDescending(c => c.Name))
                                {
                                    <div class="py-1">
                                        <span>
                                            <span class="line-icon"><span class="text-white fa-solid p-1 @(String.IsNullOrWhiteSpace(feature.CustomIcon) ? feature.Icon : feature.CustomIcon) @feature.RarityStyle"></span></span><span class="ms-1">@feature.Name</span>
                                            <span class="fa-solid fa-pencil ms-1" data-bs-toggle="modal" data-bs-target="#featureModal" @onclick="() => EditFeature = feature" />
                                            <span class="fa-solid fa-circle-xmark ms-1" data-bs-toggle="modal" data-bs-target="#confirmDeleteFeatureModal" @onclick="() => DeleteFeatureModalTarget = feature" />
                                        </span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-9 w-50">
                <div><span>Stat Blocks</span> <span class="fa-solid fa-plus" @onclick="() => AddMonster()" /></div>
                <div class="row overflow-auto px-1 d-block" style="height: 250px;">
                    @foreach (var mon in Monsters)
                    {
                        <MonsterTitleCard model="mon" DeleteCallback="() => RemoveMonster(mon)" ActiveClick="() => ActiveClick(mon)" FocusedMonster="@(mon.Id == active.Id)" SaveCallback="(m) => SaveMonsterAsync((Monster)m, true)" />
                    }
                </div>
                @*<div class="alert alert-warning">You Have Unsaved Changes!</div>*@
                <div class="row my-1">
                    @foreach (var mon in Monsters)
                    {
                        <div class="col-8">
                            <MonsterStatBlock model="mon" Hidden="@(mon.Id != active.Id)" />
                        </div>
                    }

                </div>
                <div class="row my-1">
                        <button class="btn btn-primary d-inline-block" @onclick="() => SaveActiveMonster(true)"><span class="mx-1 fas fa-floppy-disk" />Save Monster</button>
                        @if (active != null)
                        {
                            <div class="d-inline-flex justify-content-center my-1">
                                <span class="btn btn-outline-dark rounded-circle justify-content-center" style="width: 42px; height: 42px;" @onclick="() => ConvertBlockToPng()"><span class="fa fa-camera align-middle" /></span>
                                <span class="ms-2 btn btn-outline-dark rounded-circle justify-content-center" style="width: 42px; height: 42px;"><span class="fas fa-columns align-middle" /></span>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    protected List<Monster> Monsters { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? CurrentUserId = null;

    private Monster? active { get; set; }

    private Feature? EditFeature { get; set; }

    private Feature? DeleteFeatureModalTarget { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var User = authState.User;
        CurrentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);

        if (Monsters == null)
            return;

        if (Monsters.Count == 0)
        {
            CreateFirstMonster();
        }
        else
        {
            active = Monsters.First();
        }
    }

    private void ConvertBlockToPng()
    {
        var args = new object[] { "monster-" + active.Id, active.Name.Replace(" ", "-") + "_image.png" };
        _javascript.InvokeAsync<string>("takeScreenshot", args);
    }

    private async Task ConfirmDeleteFeatureModalResult(Feature target)
    {
        await RemoveFeature(target);
    }

    private int HighStat
    {
        get
        {
            return active.CombatLevel < 8 ? ((int)Math.Floor(active.CombatLevel / 4.0) + 3) : ((int)Math.Floor((active.CombatLevel - 8) / 8.0) + 5);
        }
    }

    private int MedStat
    {
        get { return (int)Math.Floor(active.CombatLevel / 8.0) + 1; }
    }

    private int LowStat
    {
        get { return (int)Math.Floor(active.CombatLevel / 12.0) - 1; }
    }

    private void SaveActiveMonster(bool showToast)
    {
        SaveMonsterAsync(active, showToast);
    }

    public async Task SaveMonsterAsync(Monster mon, bool showToast)
    {
        bool result = await _ms.UpdateMonsterAsync(mon);

        if (!showToast)
            return;

        if (result)
        {
            _ts.ShowSuccess(mon.Name, "Saved");
        }
        else
        {
            _ts.ShowError("Could not save monster!");
        }
    }


    private async Task CreateFirstMonster()
    {
        Monster monster = new("My First Monster", CurrentUserId);
        monster.Features.Add(new Action(CurrentUserId)
            {
                Name = "Hit Them",
                Rarity = RarityType.Common,
                Range = 5,
                Distance = RangeType.Melee,
                Targets = 1,
                ActionDamageType = DamageType.bludgeoning,
                DealsDamage = true,
                Shape = TargetShape.target,
                RelevantAttribute = AttributeType.Strength,
                ParentId = monster.Id
            });
        monster.Features.Add(new Action(CurrentUserId)
            {
                Name = "Hit Them Twice",
                Rarity = RarityType.Uncommon,
                Range = 5,
                MultiAttack = 2,
                Distance = RangeType.Melee,
                Targets = 1,
                ActionDamageType = DamageType.bludgeoning,
                DealsDamage = true,
                Shape = TargetShape.target,
                RelevantAttribute = AttributeType.Dexterity,
                Frequency = new FeatureFrequency()
                {
                    Type = FrequencyType.shortrest,
                    Value = 2
                },
                ParentId = monster.Id
            });
        monster.Features.Add(new Action(CurrentUserId)
            {
                Name = "Deadly Spell",
                Rarity = RarityType.Rare,
                Range = 30,
                Distance = RangeType.Ranged,
                HasSave = true,
                SaveVs = "DEX",
                Targets = 0,
                ActionDamageType = DamageType.psychic,
                RelevantAttribute = AttributeType.Intelligence,
                DealsDamage = true,
                Frequency = new FeatureFrequency()
                {
                    Type = FrequencyType.cooldown,
                    Value = 3
                },
                ParentId = monster.Id
            });

        monster.Features.Add(new BonusAction(CurrentUserId)
            {
                Name = "Bonus Smack",
                Rarity = RarityType.Common,
                Range = 5,
                Distance = RangeType.Melee,
                Targets = 1,
                ActionDamageType = DamageType.bludgeoning,
                RelevantAttribute = AttributeType.Strength,
                DealsDamage = true,
                Shape = TargetShape.target,
                DamageMultiplier = 0.5,
                ParentId = monster.Id
            });
        Monsters.Add(monster);
        active = monster;
        await _ms.InsertMonsterAsync(monster);
        UpdateValues();
    }

    public async Task RemoveFeature(Feature feature)
    {
        active.Features.Remove(feature);
        var result = await _fs.DeleteFeatureAsync(feature);
        if (result)
        {
            _ts.ShowWarning(feature.Name, "Removed Feature");
        }
        else
        {
            _ts.ShowError("Could not remove feature!");
        }
    }
    public void SenseUpdated(object? val)
    {
        var dict = (Dictionary<SenseType, int>)val;
        active.Senses = dict;
    }
    public void SpeedsUpdated(object? val)
    {
        var dict = (Dictionary<MovementType, int>)val;
        active.OtherSpeeds = dict;
    }
    public void ItemsUpdated(object? val)
    {
        var itemList = (List<string>)val;
        active.Items = itemList;
    }
    public void LanguagesUpdated(object? val)
    {
        var itemList = (List<string>)val;
        active.Languages = itemList;
    }

    public void FeaturesUpdated(object? val)
    {
        var featureList = (List<Feature>)val;
        active.Features = featureList;
    }

    public void EditFeatureChanged(object? val)
    {
        var feature = (Feature)val;
        EditFeature = feature;
    }
    public async Task AddMonster(string name = "My New Monster")
    {
        if (Monsters.Count > 50)
            return;

        var mon = new Monster(name, CurrentUserId);
        active = mon;
        Monsters.Add(mon);
        await _ms.InsertMonsterAsync(mon);
        UpdateValues();

    }
    public async Task RemoveMonster(Monster mon)
    {
        Monsters.Remove(mon);
        var result = await _ms.DeleteMonsterAsync(mon);
        if (result)
        {
            _ts.ShowWarning(mon.Name, "Removed");
        }
        else
        {
            _ts.ShowError("Could not remove monster!");
        }

        if (Monsters.Count == 0)
        {
            CreateFirstMonster();
        }
        else if (active.Id == mon.Id)
        {
            active = Monsters[0];
            UpdateValues();
        }
    }
    public void ActiveClick(Monster mon)
    {
        active = mon;
    }

    private void LevelChanged(int value)
    {
        active.CombatLevel = value;
        UpdateValues();
    }
    private void ParagonChanged(int value)
    {
        active.ParagonThreat = value;
        UpdateValues();
    }

    private void RankChanged(Rank value)
    {
        active.MonsterRank = value;
        UpdateValues();
    }

    private void RoleChanged(Role value)
    {
        active.MonsterRole = value;
        UpdateValues();
    }
    public async Task UpdateValues()
    {
        //Base formula is for a GRUNT STRIKER, everyone else is based off of that
        double ac = 12 + (int)Math.Floor((double)active.CombatLevel / 4);
        double hp = 16 + active.CombatLevel * 7;
        double tst = 2;

        double atk = active.Proficiency;
        double dc = 8 + active.Proficiency;
        double dmg = active.CombatLevel * 3;
        switch (active.MonsterRole)
        {
            case Role.Controller:
                ac += 2;
                dmg *= 0.75;
                break;
            case Role.Defender:
                ac += 4;
                hp *= 0.75;
                tst += 1;
                break;
            case Role.Lurker:
                ac -= 4;
                hp *= 0.75;
                tst -= 1;
                dmg *= 1.25;
                break;
            case Role.Skirmisher:
                ac -= 2;
                hp *= 0.75;
                break;
            case Role.Supporter:
                hp *= 1.25;
                dmg *= 0.75;
                break;
        }
        switch (active.MonsterRank)
        {
            case Rank.Minion:
                hp *= 0.2;
                dmg *= 0.75;
                break;
            case Rank.Elite:
                hp *= 2;
                ac += 1;
                tst += 1;
                dmg *= 1.1;
                break;
            case Rank.Paragon:
                ac += 2;
                hp *= active.ParagonThreat;
                tst += 1;
                dmg *= 1.2;
                break;
        }

        active.Defenses.HitPoints = (int)Math.Floor(hp);
        active.Defenses.ArmorClass = (int)Math.Floor(ac);
        active.Defenses.SaveBonus = (int)Math.Floor(tst);
        active.Offense.Attack = (int)Math.Floor(atk);
        active.Offense.Damage = Math.Max((int)Math.Floor(dmg), 1);
        active.Offense.DifficultyCheck = (int)Math.Floor(dc);
        active.WalkSpeed = 30;
        StateHasChanged();
    }
}
