@page "/monstermaker"
@attribute [Authorize(Roles = "Administrator, AllowedUser, User")]
@using GiffyglyphMonsterMakerV3.Data
@using GiffyglyphMonsterMakerV3.Utility
@using Action = GiffyglyphMonsterMakerV3.Data.Action
@using System.Security.Claims;
@using ChromiumHTMLToPDF;
@using System.Collections.ObjectModel;
@using System.Text.Json
@inject MonsterService _monsterService;
@inject FolderService _folderService;
@inject FeatureService _featureService;
@inject IToastService _toastService;
@inject IJSRuntime _javascript;
@inject Blazored.LocalStorage.ILocalStorageService localStore;


@if (ActiveMonster == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <_FeatureModal ActiveMonster="ActiveMonster" SpecificFeature="EditFeature" FeatureChangedCallback="(f) => FeaturesUpdated(f)" SelectedFeatureCallback="(f) => EditFeatureChanged(f)" SaveMonster="() => SaveActiveMonster(false)" />
    <_ConfirmDeleteFeatureModal TargetFeature="DeleteFeatureModalTarget" Result="(a) => ConfirmDeleteFeatureModalResult((Feature)a)" />

    <PageTitle>Monster Statblock Maker V3</PageTitle>
    <div class="container-xxl">
        <div class="row">
            <div class="col-3" id="monsterSettings">
                <div class="row">
                    <div><span class="fs-2 card-header" data-bs-toggle="collapse" data-bs-target="#monsterDetails" aria-expanded="true" aria-controls="monsterDetails">Monster Details<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterDetails" class="collapse show">
                        <div class="row">
                            <div class="col-6">Name:</div>
                            <div class="col-6">
                                <input @bind="ActiveMonster.Name" @bind:event="oninput" class="w-100" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">Size: </div>
                            <div class="col-6">
                                <InputSelect class="w-100" @bind-Value="ActiveMonster.Size">
                                    @foreach (var item in Enum.GetValues(typeof(SizeType)))
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">Creature Type:</div>
                            <div class="col-6">
                                <InputSelect class="w-100" @bind-Value="ActiveMonster.Type">
                                    @foreach (var item in Enum.GetValues(typeof(CreatureType)))
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6"><span class="fa-regular fa-caret-right me-1" />Type Detail:</div>
                            <div class="col-6"><input @bind="ActiveMonster.TypeDetail" @bind:event="oninput" class="w-100" /></div>
                        </div>
                        <div class="row">
                            <div class="col-6">Combat Level:</div>
                            <div class="col-6"><InputNumber Value="@ActiveMonster.CombatLevel" class="w-100" min="0" max="30" ValueChanged="(int i) => LevelChanged(i)" ValueExpression="() => ActiveMonster.CombatLevel" TValue="int" /></div>
                        </div>
                        <div class="row">
                            <div class="col-6"><span class="fa-regular fa-caret-right me-1" />Proficiency Bonus:</div>
                            <div class="col-6">@ActiveMonster.Proficiency</div>
                        </div>
                        <div class="row">
                            <div class="col-6">Rank: </div><div class="col-6">
                                <InputSelect class="w-100" Value="@ActiveMonster.MonsterRank" ValueChanged="(Rank i) => RankChanged(i)" ValueExpression="() => ActiveMonster.MonsterRank" TValue="Rank">
                                    @foreach (var item in Enum.GetValues(typeof(Rank)))
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        @if (ActiveMonster.MonsterRank == Rank.Paragon)
                        {
                            <div class="row">
                                <div class="col-6"><span class="fa-regular fa-caret-right me-1" />Threat:</div>
                                <div class="col-6">
                                    <InputNumber Value="ActiveMonster.ParagonThreat" class="w-100" min="1" ValueChanged="(int i) => ParagonChanged(i)" TValue="int" ValueExpression="() => ActiveMonster.ParagonThreat" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6"><span class="fa-regular fa-caret-right me-1" /><span class="fa-regular fa-caret-right me-1" />Paragon Powers:</div>
                                <div class="col-6">
                                    <InputNumber class="w-100" @bind-Value="ActiveMonster.ParagonPowers" min="0" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6"><span class="fa-regular fa-caret-right me-1" /><span class="fa-regular fa-caret-right me-1" />Paragon Defense:</div>
                                <div class="col-6">
                                    <InputNumber class="w-100" @bind-Value="ActiveMonster.ParagonDefenses" min="0" />
                                </div>
                            </div>
                        }
                        else if (ActiveMonster.MonsterRank == Rank.Elite)
                        {
                            <div class="row">
                                <div class="col-6"><span class="fa-regular fa-caret-right me-1" />Paragon Powers:</div>
                                <div class="col-6">
                                    <InputNumber @bind-Value="ActiveMonster.ParagonPowers" min="0" class="w-100" />
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col-6">Role: </div>
                            <div class="col-6">
                                <InputSelect class="w-100" Value="@ActiveMonster.MonsterRole" ValueChanged="(Role i) => RoleChanged(i)" ValueExpression="() => ActiveMonster.MonsterRole" TValue="Role">
                                    @foreach (var item in Enum.GetValues(typeof(Role)))
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6"><span class="fa-regular fa-caret-right me-1" />Role Special Type: </div>
                            <div class="col-6">
                                <input @bind="ActiveMonster.MonsterRoleDetail" @bind:event="oninput" class="w-100" />
                            </div>
                        </div>
                        <div class="fw-bold">Base Stats</div>
                        <div><span class="fst-italic">Recommended</span>: +@(HighStat), +@(HighStat), +@(MedStat), +@(MedStat), @(LowStat >= 0 ? "+" : "")@(LowStat), @(LowStat >= 0 ? "+" : "")@(LowStat)</div>

                        <div class="row">
                            <span class="col-2">STR: </span>
                            <InputSelect @bind-Value="ActiveMonster.Attributes.Strength" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">DEX: </span>
                            <InputSelect @bind-Value="ActiveMonster.Attributes.Dexterity" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">CON: </span>
                            <InputSelect @bind-Value="ActiveMonster.Attributes.Constitution" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="row">
                            <span class="col-2">INT: </span>
                            <InputSelect @bind-Value="ActiveMonster.Attributes.Intelligence" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">WIS: </span>
                            <InputSelect @bind-Value="ActiveMonster.Attributes.Wisdom" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                            <span class="col-2">CHA: </span>
                            <InputSelect @bind-Value="ActiveMonster.Attributes.Charisma" class="col-2">
                                @for (int i = 7; i > -6; i--)
                                {
                                    <option>@i</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterOffense" aria-expanded="true" aria-controls="monsterOffense">Offense<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterOffense" class="collapse">
                        <div class="row">
                            <div class="col-6">Attack Bonus:</div>
                            <div class="col-6">
                                <InputNumber @bind-Value="ActiveMonster.Offense.Attack" class="w-100" min="0" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">DC Mod:</div>
                            <div class="col-6">
                                <InputNumber @bind-Value="ActiveMonster.Offense.DifficultyCheck" class="w-100" min="0" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">Damage Average:</div>
                            <div class="col-6">
                                <InputNumber @bind-Value="ActiveMonster.Offense.Damage" class="w-100" min="0" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6"><span class="fa-regular fa-caret-right me-1" />Randomize?</div>
                            <div class="col-6">
                                <div class="row px-2">
                                    <div class="col-2 g-0 h-auto">
                                        <InputCheckbox class="h-100 w-100" @bind-Value="ActiveMonster.Offense.RandomizeDamage" />
                                    </div>
                                    @if (ActiveMonster.Offense.RandomizeDamage)
                                    {
                                        <div class="col g-0 pe-2">
                                            <InputSelect class="w-100" @bind-Value="@ActiveMonster.Offense.RandomDamageRange" TValue="DamageRange">
                                                @foreach (var item in Enum.GetValues(typeof(DamageRange)))
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        @if (ActiveMonster.Offense.RandomizeDamage)
                        {
                            <div class="row">
                                <div class="col-6"><span class="fa-regular fa-caret-right me-1" /><span class="fa-regular fa-caret-right me-1" />Randomized Roll:</div>
                                <div class="col-6">(@(DiceTools.ConvertToDiceString(ActiveMonster.Offense.RandomDamageRange, ActiveMonster.Offense.Damage)))</div>
                            </div>
                        }
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterDefense" aria-expanded="true" aria-controls="monsterDefense">Defense<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterDefense" class="collapse">
                        <div class="row">
                            <div class="col-6">Armor Class:</div>
                            <div class="col-6">
                                <InputNumber @bind-Value="ActiveMonster.Defenses.ArmorClass" class="w-100" min="0" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">Hit Points:</div>
                            <div class="col-6">
                                <InputNumber @bind-Value="ActiveMonster.Defenses.HitPoints" class="w-100" min="0" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <div class="row">
                                    <span>Proficient Saves (@ActiveMonster.Defenses.TrainedSavingThrows):</span>
                                </div>
                                <div class="row">
                                    @if (ActiveMonster.Defenses.ProficientSavingThrows.NumberTrained > ActiveMonster.Defenses.TrainedSavingThrows)
                                    {
                                        <span class="text-danger">More trained Saving Throws than suggested.</span>
                                    }
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="row px-2">
                                    <InputCheckbox class="col" @bind-Value="ActiveMonster.Defenses.ProficientSavingThrows.Strength" /><span class="col">STR</span>
                                    <InputCheckbox class="col" @bind-Value="ActiveMonster.Defenses.ProficientSavingThrows.Intelligence" /><span class="col">INT</span>
                                </div>
                                <div class="row px-2">
                                    <InputCheckbox class="col" @bind-Value="ActiveMonster.Defenses.ProficientSavingThrows.Dexterity" /><span class="col">DEX</span>
                                    <InputCheckbox class="col" @bind-Value="ActiveMonster.Defenses.ProficientSavingThrows.Wisdom" /><span class="col">WIS</span>
                                </div>
                                <div class="row px-2">
                                    <InputCheckbox class="col" @bind-Value="ActiveMonster.Defenses.ProficientSavingThrows.Constitution" /><span class="col">CON</span>
                                    <InputCheckbox class="col" @bind-Value="ActiveMonster.Defenses.ProficientSavingThrows.Charisma" /><span class="col">CHA</span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            @{
                                List<string> immuneDefaults = Enum.GetNames(typeof(DamageType)).ToList();
                                immuneDefaults.AddRange(Enum.GetNames(typeof(ConditionType)).ToList());
                            }
                            <_stringAdder Header="Immunities" ValueList="@ActiveMonster.Defenses.Immunities" ValueChangedEvent="(a) => ImmunitiesUpdated(a)" DefaultList="immuneDefaults"></_stringAdder>
                        </div>
                        <div class="row">
                            <_stringAdder Header="Resistances" ValueList="@ActiveMonster.Defenses.Resistances" ValueChangedEvent="(a) => ResistancesUpdated(a)" DefaultList="Enum.GetNames(typeof(DamageType)).ToList()"></_stringAdder>
                        </div>
                        <div class="row">
                            <_stringAdder Header="Vulnerabilities" ValueList="@ActiveMonster.Defenses.Vulnerabilities" ValueChangedEvent="(a) => VulnerabilitiesUpdated(a)" DefaultList="Enum.GetNames(typeof(DamageType)).ToList()"></_stringAdder>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterAbilities" aria-expanded="true" aria-controls="monsterAbilities">Abilities<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterAbilities" class="collapse">
                        <div class="row">
                            <div class="col-6">Base Speed:</div>
                            <div class="col-6">
                                <InputNumber @bind-Value="ActiveMonster.WalkSpeed" class="w-100" min="0" placeholder="30" />
                            </div>
                        </div>
                        <div>
                            <_EnumAdder Dict="@ActiveMonster.OtherSpeeds" Header="Other Speeds" ValueChangedEvent="(a) => SpeedsUpdated(a)"></_EnumAdder>
                        </div>
                        <div>
                            <_EnumAdder Dict="@ActiveMonster.Senses" Header="Senses" ValueChangedEvent="(a) => SenseUpdated(a)"></_EnumAdder>
                        </div>
                        <div>
                            <_stringAdder Header="Languages" ValueList="@ActiveMonster.Languages" ValueChangedEvent="(a) => LanguagesUpdated(a)" DefaultList="Enum.GetNames(typeof(DefaultLanguages)).ToList()"></_stringAdder>
                        </div>
                        <div>
                            <_stringAdder Header="Items" ValueList="@ActiveMonster.Items" ValueChangedEvent="(a) => ItemsUpdated(a)"></_stringAdder>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div><span class="fs-2 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#monsterFeatures" aria-expanded="true" aria-controls="monsterFeatures">Features<span class="fas fa-chevrons-down mx-1 fs-3" /><span class="fas fa-chevrons-up mx-1 fs-3" /></span></div>
                    <div id="monsterFeatures" class="collapse">
                        <span class="fst-italic">Recommended Features: </span>
                        <div>
                            <span class="fst-italic">
                                @switch (ActiveMonster.MonsterRank)
                                {
                                    case Rank.Minion:
                                        @("1-5 (1 Ancestral, 1 Role, 2 Misc)")
                                        break;
                                    case Rank.Grunt:
                                        @("3-8 (2 Ancestral, 2 Role, 3 Misc)")
                                        break;
                                    case Rank.Elite:
                                        @("5-11 (3 Ancestral, 2 Role, 4 Misc)")
                                        break;
                                    case Rank.Paragon:
                                        @("7-14 (3 Ancestral, 3 Role, 7 Misc)")
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }
                            </span>
                        </div>
                        <div class="fw-bold" data-bs-toggle="modal" data-bs-target="#featureModal" @onclick="() => EditFeature = null">Add Feature<span class="fas fa-plus ms-1"></span></div>
                        @foreach (var fType in
                                            ActiveMonster.Features
                                            .Select(a => a.Type)
                                            .Distinct()
                                            .OrderBy(b => (int)b)
                                            )

                        {
                            <div>
                                <span class="fw-bold">@fType@(fType.ToString().EndsWith("s") ? "" : "s")</span>
                                @foreach (var feature in ActiveMonster.Features.Where(a => a.Type == fType).OrderBy(d => d.Rarity).ThenByDescending(c => c.Name))
                                {
                                    <div class="py-1">
                                        <span>
                                            <span class="line-icon"><span class="text-white fa-solid p-1 align-middle @(String.IsNullOrWhiteSpace(feature.CustomIcon) ? feature.Icon : feature.CustomIcon) @feature.RarityStyle"></span></span><span class="ms-1">@feature.Name</span>
                                            <span class="fa-solid fa-pencil ms-1" data-bs-toggle="modal" data-bs-target="#featureModal" @onclick="() => EditFeature = feature" />
                                            <span class="fa-solid fa-circle-xmark ms-1" data-bs-toggle="modal" data-bs-target="#confirmDeleteFeatureModal" @onclick="() => DeleteFeatureModalTarget = feature" />
                                        </span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-9 w-50">
                <div><span class="fs-4 card-header collapsed" data-bs-toggle="collapse" data-bs-target="#FolderDiv" aria-expanded="true" aria-controls="FolderDiv">Folders<span class="ms-1">(@(Folders.Count)/@_maxFolders)</span><span class="fas fa-chevrons-down mx-1 fs-6" /><span class="fas fa-chevrons-up mx-1 fs-6" /></span></div>
                @{
                    var activeFolder = ActiveFolder;
                    string folderName = ActiveFolder.Name;
                    bool hasParent = activeFolder?.ParentId != null;
                    Folder recurseParent = activeFolder;
                    while (hasParent)
                    {
                        recurseParent = Folders.First(a => a.Id == recurseParent.ParentId);

                        if (recurseParent.IsBaseFolder)
                            folderName = recurseParent.Name + folderName;
                        else
                            folderName = recurseParent.Name + "/" + folderName;

                        if (recurseParent.ParentId == null)
                            hasParent = false;
                    }
                }
                <div id="@ActiveFolderId">
                    <span class="fa-solid fa-folder-open me-1 @(activeFolder.Id == ActiveMonster.FolderId ? "text-success" : "")" title="Active Folder" />@folderName
                    @if (activeFolder.Creatures.Count == 0 && activeFolder.Children.Count == 0)
                    {
                        <button type="button" class="btn btn-sm btn-outline-danger ms-3" @onclick="() => DeleteFolder(activeFolder.Id)"><span class="fa-regular fa-folder-xmark me-1" />Delete Folder</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-secondary ms-3 disabled"><span class="fa-regular fa-folder-xmark me-1" />Cannot Delete Unless Empty</button>
                    }
                </div>
                <div id="FolderDiv" class="collapse">
                    @{
                        if (!activeFolder.IsBaseFolder)
                        {
                            <div class="ms-2" role="button" id="@ActiveFolderId" @onclick="() => ActiveFolderId = activeFolder.ParentId"><span class="fa-solid fa-folder-arrow-up me-1 @(ActiveMonster.FolderId == activeFolder.ParentId ? " text-success" : "")" title="Up One Level" />...</div>
                        }
                        foreach (var item in activeFolder.Children)
                        {
                            <div class="ms-2" role="button" id="@item.Id" @onclick="() => ActiveFolderId = item.Id"><span class="fa-solid fa-folder me-1 @(ActiveMonster.FolderId == item.Id ? " text-success" : "")" title="Inactive Folder" />@item.Name</div>
                        }
                    }
                    <div>
                        <input @bind="@NewFolderName" @bind:event="oninput" class="w-50" placeholder="New Folder Name" />
                        <span class="fa-regular fa-folder-plus" title="Add New Folder" @onclick="() => AddFolder()" />
                    </div>
                </div>
                <hr class="ms-2" />
                <div class="ms-2">
                    <span>Stat Blocks</span>
                    <span class="fa-kit fa-solid-skull-circle-plus" title="Add New Monster" @onclick="() => AddMonster()" />
                    <span class="fa-solid fa-copy" title="Copy Current Monster" @onclick="() => CopyCurrentMonster()" />
                    <span class="ms-1">(@(Monsters.Count)/@_maxMonsters)</span>
                    @if (ActiveMonster.FolderId != ActiveFolderId)
                    {
                        <button class="btn btn-sm btn-outline-success ms-2" type="button" @onclick="() => MoveActiveMonsterToActiveFolder()"><span class="fa-regular fa-folder-arrow-down me-1" />Move Active to this Folder</button>
                    }
                </div>
                <div class="row overflow-auto px-1 d-block ms-2" style="height: 250px;">
                    @foreach (var mon in ActiveFolder.Creatures.Select(a => a as Monster).OrderBy(m => m.Name))
                    {
                        <MonsterTitleCard model="mon" DeleteCallback="() => RemoveMonster(mon)" ActiveClick="() => ActiveClick(mon)" FocusedMonster="@(mon.Id == ActiveMonster.Id)" SaveCallback="(m) => SaveMonsterAsync((Monster)m, true)" />
                    }
                </div>
                @*<div class="alert alert-warning">You Have Unsaved Changes!</div>*@
                <div class="row my-1">
                    @foreach (var mon in ActiveFolder.Creatures.Select(a => a as Monster))
                    {
                        if (mon.Layout == LayoutType.Single)
                        {
                            <div class="col-8">
                                <MonsterStatBlock_OneColumn model="mon" Hidden="@(mon.Id != ActiveMonster.Id)" />
                            </div>
                        }
                        else if (mon.Layout == LayoutType.TwoColumn)
                        {
                            <div class="col-12">
                                <MonsterStatBlock_TwoColumn model="mon" Hidden="@(mon.Id != ActiveMonster.Id)" />
                            </div>
                        }
                    }

                </div>
                <div class="row my-1">
                    <button class="btn btn-primary d-inline-block col-9" @onclick="() => SaveActiveMonster(true)"><span class="mx-1 fas fa-floppy-disk" />Save Monster</button>
                    @if (ActiveMonster != null)
                    {
                        <div class="d-flex my-1 justify-content-start col">
                            <span class="btn btn-outline-dark rounded-circle justify-content-center" style="width: 42px; height: 42px;" @onclick="() => ConvertBlockToPng()"><span class="fa fa-camera align-middle" /></span>
                            <span class="ms-2 btn btn-outline-dark rounded-circle justify-content-center" style="width: 42px; height: 42px;" @onclick="() => ChangeMonsterColumnLayout()"><span class="fas fa-columns align-middle" /></span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [CascadingParameter]
    protected List<Folder> Folders { get; set; }

    [CascadingParameter]
    private List<Monster> Monsters { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Guid? _activeFolderId = null;
    private Guid? ActiveFolderId
    {
        get
        {
            return _activeFolderId;
        }
        set
        {
            if (value != _activeFolderId)
            {
                _activeFolderId = value;
                LocalUserData.lastOpenedFolder = value;
                localStore.SetItemAsync("giffglyphmonstermaker.skyl3lazer", LocalUserData);
            }
        }
    }
    private Folder? ActiveFolder
    {
        get
        {
            return Folders?.FirstOrDefault(a => a.Id == ActiveFolderId);
        }
    }
    private Folder? ActiveMonsterFolder
    {
        get
        {
            return Folders?.FirstOrDefault(a => a.Id == ActiveMonster?.FolderId);
        }
    }

    private readonly int _maxMonsters = 150;
    private readonly int _maxFolders = 50;

    private string? CurrentUserId = null;

    private string NewFolderName { get; set; }

    private Monster? _activeMonster;
    private Monster? ActiveMonster
    {
        get
        {
            return _activeMonster;
        }
        set
        {
            if (value != _activeMonster && value != null)
            {
                _activeMonster = value;
                LocalUserData.lastOpenedMonster = value.Id; 
                localStore.SetItemAsync("giffglyphmonstermaker.skyl3lazer", LocalUserData);
            }
        }
    }

    private Feature? EditFeature { get; set; }

    private Feature? DeleteFeatureModalTarget { get; set; }

    private LocalStorage LocalUserData { get; set; } = new();

    protected async override Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var User = authState.User;
        CurrentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (Folders == null)
            return;

        try
        {
            LocalUserData = await localStore.GetItemAsync<LocalStorage>("giffglyphmonstermaker.skyl3lazer") ?? new LocalStorage();
        }
        catch (Exception ex) { }

        await localStore.SetItemAsync("giffglyphmonstermaker.skyl3lazer", LocalUserData);

        Folder? topFolder = null;

        if (LocalUserData.lastOpenedFolder == null)
        {
            topFolder = Folders.First(a => a.IsBaseFolder);
        }
        else
        {
            topFolder = Folders.First(a => a.Id == LocalUserData.lastOpenedFolder);
        }

        if (Monsters == null)
            return;

        if (Monsters.Count == 0)
        {
            ActiveFolderId = topFolder?.Id;
            await CreateFirstMonster();
        }
        else
        {
            //Migrate monsters without folders to the base folder
            foreach (var m in Monsters.Where(a => a.FolderId == null || a.FolderId == Guid.Empty))
            {
                topFolder.Creatures.Add(m);
                m.FolderId = topFolder.Id;
                await SaveMonsterAsync(m, false);
            }

            if (LocalUserData?.lastOpenedMonster == null)
            {
                ActiveMonster = GetFirstMonster(topFolder) as Monster;
            }
            else
            {
                ActiveMonster = Monsters.First(a => a.Id == LocalUserData.lastOpenedMonster);
            }
            if (ActiveMonster == null)
            {
                ActiveMonster = Monsters.First();
                ActiveMonster = ActiveMonsterFolder.Creatures.First() as Monster;
            }

            ActiveFolderId = ActiveMonster.FolderId ?? topFolder.Id;
        }
    }
    // There won't always be a monster in the top folder, so we have to go find one.
    private Creature? GetFirstMonster(Folder root)
    {
        Queue<Folder> Q = new Queue<Folder>();
        HashSet<Folder> S = new HashSet<Folder>();
        Q.Enqueue(root);
        S.Add(root);
        while (Q.Count > 0)
        {
            Folder f = Q.Dequeue();
            if (f.Creatures.Count > 0)
                return f.Creatures.First();
            foreach (Folder friend in f.Children)
            {
                if (!S.Contains(friend))
                {
                    Q.Enqueue(friend);
                    S.Add(friend);
                }
            }
        }
        return null;
    }

    //If we want to draw a tree later, unused for now
    public void TraverseFolders(Folder root)
    {
        Queue<Folder> traverseOrder = new Queue<Folder>();

        Queue<Folder> Q = new Queue<Folder>();
        HashSet<Folder> S = new HashSet<Folder>();
        Q.Enqueue(root);
        S.Add(root);

        while (Q.Count > 0)
        {
            Folder e = Q.Dequeue();
            traverseOrder.Enqueue(e);

            foreach (Folder fol in e.Children)
            {
                if (!S.Contains(fol))
                {
                    Q.Enqueue(fol);
                    S.Add(fol);
                }
            }
        }

        while (traverseOrder.Count > 0)
        {
            Folder e = traverseOrder.Dequeue();
            // Console.WriteLine(e);
        }
    }


    private void ChangeMonsterColumnLayout()
    {
        ActiveMonster.Layout = ActiveMonster.Layout == LayoutType.Single ? LayoutType.TwoColumn : LayoutType.Single;
        StateHasChanged();
    }

    private void ConvertBlockToPng()
    {
        var args = new object[] { "monster-" + ActiveMonster.Id, ActiveMonster.Name.Replace(" ", "-") + "_image.png" };
        _javascript.InvokeAsync<string>("takeScreenshot", args);
    }

    private async Task ConfirmDeleteFeatureModalResult(Feature target)
    {
        await RemoveFeature(target);
    }

    private async Task CopyCurrentMonster()
    {
        if (ActiveMonster == null)
            return;
        if (Monsters.Count >= _maxMonsters)
        {
            _toastService.ShowError("At Maximum Monsters (" + _maxMonsters + ")!");
            return;
        }

        Monster? result = await _monsterService.CopyMonsterAsync(ActiveMonster);

        if (result != null)
        {
            Monsters.Add(result);
            ActiveFolder.Creatures.Add(result);
            _toastService.ShowSuccess("Copied " + ActiveMonster.Name);
        }
        else
        {
            _toastService.ShowError("Could not copy monster!");
        }
    }

    private int HighStat
    {
        get
        {
            return ActiveMonster.CombatLevel < 8 ? ((int)Math.Floor(ActiveMonster.CombatLevel / 4.0) + 3) : ((int)Math.Floor((ActiveMonster.CombatLevel - 8) / 8.0) + 5);
        }
    }

    private int MedStat
    {
        get { return (int)Math.Floor(ActiveMonster.CombatLevel / 8.0) + 1; }
    }

    private int LowStat
    {
        get { return (int)Math.Floor(ActiveMonster.CombatLevel / 12.0) - 1; }
    }

    private async Task SaveActiveMonster(bool showToast)
    {
        await SaveMonsterAsync(ActiveMonster, showToast);
    }

    public async Task SaveMonsterAsync(Monster mon, bool showToast)
    {
        bool result = await _monsterService.UpdateMonsterAsync(mon);

        if (!showToast)
            return;

        if (result)
        {
            _toastService.ShowSuccess("Saved " + mon.Name);
        }
        else
        {
            _toastService.ShowError("Could not save monster!");
        }
    }


    private async Task CreateFirstMonster()
    {
        Monster monster = new("My First Monster", CurrentUserId) { FolderId = ActiveFolderId };
        monster.Features.Add(new Action(CurrentUserId)
        {
            Name = "Hit Them",
            Rarity = RarityType.Common,
            Range = 5,
            Distance = RangeType.Melee,
            Targets = 1,
            ActionDamageType = DamageType.bludgeoning,
            DealsDamage = true,
            Shape = TargetShape.target,
            RelevantAttribute = AttributeType.Strength,
            ParentId = monster.Id
        });
        monster.Features.Add(new Action(CurrentUserId)
        {
            Name = "Hit Them Twice",
            Rarity = RarityType.Uncommon,
            Range = 5,
            MultiAttack = 2,
            Distance = RangeType.Melee,
            Targets = 1,
            ActionDamageType = DamageType.bludgeoning,
            DealsDamage = true,
            Shape = TargetShape.target,
            RelevantAttribute = AttributeType.Dexterity,
            Frequency = new FeatureFrequency()
            {
                Type = FrequencyType.shortrest,
                Value = 2
            },
            ParentId = monster.Id
        });
        monster.Features.Add(new Action(CurrentUserId)
        {
            Name = "Deadly Spell",
            Rarity = RarityType.Rare,
            Range = 30,
            Distance = RangeType.Ranged,
            HasSave = true,
            SaveVs = "DEX",
            Targets = 0,
            ActionDamageType = DamageType.psychic,
            RelevantAttribute = AttributeType.Intelligence,
            DealsDamage = true,
            Frequency = new FeatureFrequency()
            {
                Type = FrequencyType.cooldown,
                Value = 3
            },
            ParentId = monster.Id
        });

        monster.Features.Add(new BonusAction(CurrentUserId)
        {
            Name = "Bonus Smack",
            Rarity = RarityType.Common,
            Range = 5,
            Distance = RangeType.Melee,
            Targets = 1,
            ActionDamageType = DamageType.bludgeoning,
            RelevantAttribute = AttributeType.Strength,
            DealsDamage = true,
            Shape = TargetShape.target,
            DamageMultiplier = 0.5,
            ParentId = monster.Id
        });
        Monsters.Add(monster);
        ActiveFolder.Creatures.Add(monster);
        ActiveMonster = monster;
        await _monsterService.InsertMonsterAsync(monster);
        UpdateValues();
    }

    public async Task RemoveFeature(Feature feature)
    {
        ActiveMonster.Features.Remove(feature);
        var result = await _featureService.DeleteFeatureAsync(feature);
        if (result)
        {
            _toastService.ShowWarning("Removed Feature " + feature.Name);
        }
        else
        {
            _toastService.ShowError("Could not remove feature!");
        }
    }
    public void SenseUpdated(object? val)
    {
        var dict = (Dictionary<SenseType, int>)val;
        ActiveMonster.Senses = dict;
    }
    public void SpeedsUpdated(object? val)
    {
        var dict = (Dictionary<MovementType, int>)val;
        ActiveMonster.OtherSpeeds = dict;
    }
    public void ItemsUpdated(object? val)
    {
        var itemList = (List<string>)val;
        ActiveMonster.Items = itemList;
    }
    public void LanguagesUpdated(object? val)
    {
        var itemList = (List<string>)val;
        ActiveMonster.Languages = itemList;
    }
    public void ImmunitiesUpdated(object? val)
    {
        var itemList = (List<string>)val;
        ActiveMonster.Defenses.Immunities = itemList;
    }
    public void ResistancesUpdated(object? val)
    {
        var itemList = (List<string>)val;
        ActiveMonster.Defenses.Resistances = itemList;
    }
    public void VulnerabilitiesUpdated(object? val)
    {
        var itemList = (List<string>)val;
        ActiveMonster.Defenses.Vulnerabilities = itemList;
    }
    public void FeaturesUpdated(object? val)
    {
        var featureList = (List<Feature>)val;
        ActiveMonster.Features = featureList;
    }

    public void EditFeatureChanged(object? val)
    {
        var feature = (Feature)val;
        EditFeature = feature;
    }
    public async Task AddFolder()
    {
        if (Folders.Count >= _maxFolders)
        {
            _toastService.ShowError("At Maximum Folders (" + _maxMonsters + ")!");
            return;
        }
        if (string.IsNullOrWhiteSpace(NewFolderName))
            return;

        Folder newFolder = new(NewFolderName, CurrentUserId);
        newFolder.ParentId = ActiveFolderId;
        Folders.Add(newFolder);
        ActiveFolderId = newFolder.Id;
        await _folderService.InsertFolderAsync(newFolder);
        newFolder.Parent = Folders.First(a => a.Id == newFolder.ParentId);
        newFolder.Parent.Children.Add(newFolder);
        NewFolderName = "";
        StateHasChanged();
    }
    public async Task DeleteFolder(Guid removeId)
    {
        if (removeId == Guid.Empty)
            return;

        Folder? removeMe = Folders.FirstOrDefault(a => a.Id == removeId);

        if (removeMe == null)
            return;

        var parentId = removeMe.ParentId;
        removeMe.ParentId = null;

        bool deleted = await _folderService.DeleteFolderAsync(removeMe);
        if (deleted)
        {
            ActiveFolderId = parentId;
            ActiveFolder.Children.Remove(removeMe);
            Folders.Remove(removeMe);
            _toastService.ShowSuccess("Deleted Folder");
        }
        else
        {
            _toastService.ShowError("Could not remove monster!");
        }
        StateHasChanged();
    }
    public async Task AddMonster(string name = "My New Monster")
    {
        if (Monsters.Count >= _maxMonsters)
        {
            _toastService.ShowError("At Maximum Monsters (" + _maxMonsters + ")!");
            return;
        }

        var mon = new Monster(name, CurrentUserId) { FolderId = ActiveFolderId };

        ActiveFolder?.Creatures.Add(mon);
        ActiveMonster = mon;
        Monsters.Add(mon);
        await _monsterService.InsertMonsterAsync(mon);
        UpdateValues();

    }
    public async Task RemoveMonster(Monster mon)
    {
        //make this remove the monster from the folder's creatures
        ActiveMonsterFolder?.Creatures.Remove(mon);
        Monsters.Remove(mon);
        var result = await _monsterService.DeleteMonsterAsync(mon);
        if (result)
        {
            _toastService.ShowWarning("Removed " + mon.Name);
        }
        else
        {
            _toastService.ShowError("Could not remove monster!");
        }

        if (Monsters.Count == 0)
        {
            CreateFirstMonster();
        }
        else if (ActiveMonster.Id == mon.Id)
        {
            if (ActiveFolder.Creatures.Count > 0)
                ActiveMonster = ActiveFolder.Creatures.First() as Monster;
            else
                ActiveMonster = GetFirstMonster(Folders.First(a => a.IsBaseFolder)) as Monster;

            UpdateValues();
        }
    }
    public async Task MoveActiveMonsterToActiveFolder()
    {
        ActiveMonsterFolder.Creatures.Remove(ActiveMonster);
        ActiveFolder.Creatures.Add(ActiveMonster);
        ActiveMonster.FolderId = ActiveFolderId;
        await SaveMonsterAsync(ActiveMonster, true);
    }
    public void ActiveClick(Monster mon)
    {
        ActiveMonster = mon;
    }

    private void LevelChanged(int value)
    {
        ActiveMonster.CombatLevel = value;
        UpdateValues();
    }
    private void ParagonChanged(int value)
    {
        ActiveMonster.ParagonThreat = value;
        UpdateValues();
    }

    private void RankChanged(Rank value)
    {
        ActiveMonster.MonsterRank = value;
        UpdateValues();
    }

    private void RoleChanged(Role value)
    {
        ActiveMonster.MonsterRole = value;
        UpdateValues();
    }
    public async Task UpdateValues()
    {
        //Base formula is for a GRUNT STRIKER, everyone else is based off of that
        double ac = 12 + (int)Math.Floor((double)ActiveMonster.CombatLevel / 4);
        double hp = 16 + ActiveMonster.CombatLevel * 7;
        double tst = 2;

        int paraPower = 0;
        int paraDef = 0;

        double atk = ActiveMonster.Proficiency;
        double dc = 8 + ActiveMonster.Proficiency;
        double dmg = ActiveMonster.CombatLevel * 3;
        switch (ActiveMonster.MonsterRole)
        {
            case Role.Controller:
                ac += 2;
                dmg *= 0.75;
                break;
            case Role.Defender:
                ac += 4;
                hp *= 0.75;
                tst += 1;
                dmg *= 0.75;
                break;
            case Role.Lurker:
                ac -= 4;
                hp *= 0.75;
                tst -= 1;
                dmg *= 1.25;
                break;
            case Role.Skirmisher:
                ac -= 2;
                hp *= 0.75;
                break;
            case Role.Supporter:
                hp *= 1.25;
                dmg *= 0.75;
                break;
        }
        switch (ActiveMonster.MonsterRank)
        {
            case Rank.Minion:
                hp *= 0.2;
                dmg *= 0.75;
                tst -= 1;
                break;
            case Rank.Elite:
                hp *= 2;
                ac += 1;
                tst += 1;
                dmg *= 1.1;
                paraPower = 1;
                break;
            case Rank.Paragon:
                ac += 2;
                hp *= ActiveMonster.ParagonThreat;
                tst += 1;
                dmg *= 1.2;
                paraPower = ActiveMonster.ParagonThreat - 1;
                paraDef = (int)Math.Floor(ActiveMonster.ParagonThreat / 2.0);
                break;
        }

        ActiveMonster.Defenses.HitPoints = (int)Math.Floor(hp);
        ActiveMonster.Defenses.ArmorClass = (int)Math.Floor(ac);
        ActiveMonster.Defenses.TrainedSavingThrows = (int)Math.Floor(tst);
        ActiveMonster.Offense.Attack = (int)Math.Floor(atk);
        ActiveMonster.Offense.Damage = Math.Max((int)Math.Floor(dmg), 1);
        ActiveMonster.Offense.DifficultyCheck = (int)Math.Floor(dc);
        ActiveMonster.WalkSpeed = 30;
        ActiveMonster.ParagonPowers = paraPower;
        ActiveMonster.ParagonDefenses = paraDef;
        StateHasChanged();
    }
}
