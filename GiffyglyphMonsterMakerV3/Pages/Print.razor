@page "/print"
@attribute [Authorize(Roles = "Administrator, AllowedUser, User")]
@using GiffyglyphMonsterMakerV3.Data
@using GiffyglyphMonsterMakerV3.Utility

<PageTitle>Print Statblocks</PageTitle>

@if (popQueue == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container-xxl" id="print">
        <div class="d-print-none alert alert-info">Use your browser's Print feature to print stat blocks. 2 per page, with overflow that looks bad (for now)</div>
        @while (popQueue.Count > 0)
        {
            <div class="d-block" style="page-break-after: always; break-after: page;">
                @if (popQueue.Peek().Layout == LayoutType.Single)
                {
                    @if (popQueue.Count > 0)
                    {
                        <div class="d-inline-block col-6">
                            <MonsterStatBlock_OneColumn model="popQueue.Dequeue()" Hidden="false" />
                        </div>
                    }
                    @if (popQueue.Count > 0 && popQueue.Peek().Layout == LayoutType.Single)
                    {
                        <div class="d-inline-block col-6">
                            <MonsterStatBlock_OneColumn model="popQueue.Dequeue()" Hidden="false" />
                        </div>
                    }
                }
                else if (popQueue.Peek().Layout == LayoutType.TwoColumn)
                {
                    <div class="d-block">
                        <MonsterStatBlock_TwoColumn model="popQueue.Dequeue()" Hidden="false" />
                    </div>
                }
            </div>
        }
    </div>
}
@code {
    [CascadingParameter]
    protected List<Monster>? Monsters { get; set; }

    private Queue<Monster>? popQueue { get; set; }

    protected override void OnParametersSet()
    {
        if (Monsters != null)
        {
            popQueue = new Queue<Monster>(Monsters);
        }
    }
}
